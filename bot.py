import sys
import logging
import random
import string
import json
import mysql.connector
import asyncio
import traceback
import os
from db_config import db_config
from datetime import datetime, timedelta, timezone  # Add timezone
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, InputMediaPhoto, InputMediaVideo, ReplyParameters
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler, MessageHandler
from telegram.ext import filters, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telegram.error import BadRequest, TelegramError
import telegram.error
# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –±–æ—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
from muhurta_test import register_handlers as register_muhurta_handlers
from muhurta_test import start_muhurta_test
from biorhythm_test import register_handlers as register_biorhythm_handlers
from utils import get_referrals
from sovmes import register_handlers as register_compatibility_handlers
from sovmes import start_compatibility_test
from lk import start_moon_calendar, register_handlers as register_moon_handlers

OFFSET_FILE = "/var/www/admin78/data/www/vdohnovenie.pro/bot/last_update_id.txt"

LOG_FILE = "/var/www/admin78/data/www/vdohnovenie.pro/bot/logs/bot.log"

logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename=LOG_FILE,
    filemode="w",
    encoding='utf-8'
)

# –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_IDS = [49001683, 1346624809]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# 1. –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ ADMIN_IDS
ALLOWED_GROUP_ID = -1002126524645  # ID –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
ALLOWED_DISCUSSION_ID = -1002140411209  # ID —á–∞—Ç–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π
ALLOWED_GROUP_USERNAME = "vdohnovenie_pro"

TEST_CHANNEL_ID = -1002414600895  # ID —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
TEST_DISCUSSION_ID = -1002432554211  # ID —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —á–∞—Ç–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π

def save_last_update_id(update_id):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π update_id –≤ —Ñ–∞–π–ª"""
    try:
        with open(OFFSET_FILE, 'w') as f:
            f.write(str(update_id))
    except Exception as e:
        logging.error(f"Error saving last update ID: {e}")

def get_last_update_id():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π update_id –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(OFFSET_FILE):
            with open(OFFSET_FILE, 'r') as f:
                return int(f.read().strip())
    except Exception as e:
        logging.error(f"Error reading last update ID: {e}")
    return 0

# –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å MENU_CALLBACKS –Ω–æ–≤—ã–π –ø—É–Ω–∫—Ç
MENU_CALLBACKS = {
    # ...existing code...
    'muhurta': start_muhurta_test,
}

def get_level_requirements():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è"""
    return {
        0: 0,     # 0-–π —É—Ä–æ–≤–µ–Ω—å: —Å—Ç–∞—Ä—Ç
        1: 5,     # 1-–π —É—Ä–æ–≤–µ–Ω—å: 5 —Å–æ–æ–±—â–µ–Ω–∏–π
        2: 15,    # 2-–π —É—Ä–æ–≤–µ–Ω—å: 15 —Å–æ–æ–±—â–µ–Ω–∏–π
        3: 35,    # 3-–π —É—Ä–æ–≤–µ–Ω—å: 35 —Å–æ–æ–±—â–µ–Ω–∏–π 
        4: 65,    # 4-–π —É—Ä–æ–≤–µ–Ω—å: 65 —Å–æ–æ–±—â–µ–Ω–∏–π
        5: 105,   # 5-–π —É—Ä–æ–≤–µ–Ω—å: 105 —Å–æ–æ–±—â–µ–Ω–∏–π
        6: 155,   # 6-–π —É—Ä–æ–≤–µ–Ω—å: 155 —Å–æ–æ–±—â–µ–Ω–∏–π
        7: 215,   # 7-–π —É—Ä–æ–≤–µ–Ω—å: 215 —Å–æ–æ–±—â–µ–Ω–∏–π
        8: 285,   # 8-–π —É—Ä–æ–≤–µ–Ω—å: 285 —Å–æ–æ–±—â–µ–Ω–∏–π
        9: 355,   # 9-–π —É—Ä–æ–≤–µ–Ω—å: 355 —Å–æ–æ–±—â–µ–Ω–∏–π
        10: 445,  # 10-–π —É—Ä–æ–≤–µ–Ω—å: 445 —Å–æ–æ–±—â–µ–Ω–∏–π
        11: 545   # 11-–π —É—Ä–æ–≤–µ–Ω—å: 545 —Å–æ–æ–±—â–µ–Ω–∏–π (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π)
    }

def calculate_level_reward(level):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è"""
    rewards = {
        0: 0,      # –Ω–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –±–µ–∑ –Ω–∞–≥—Ä–∞–¥—ã
        1: 50,     # –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ 1-–π —É—Ä–æ–≤–µ–Ω—å (5 —Å–æ–æ–±—â–µ–Ω–∏–π)
        2: 100,    # –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ 2-–π —É—Ä–æ–≤–µ–Ω—å (15 —Å–æ–æ–±—â–µ–Ω–∏–π)
        3: 200,    # –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ 3-–π —É—Ä–æ–≤–µ–Ω—å (35 —Å–æ–æ–±—â–µ–Ω–∏–π)
        4: 300,    # –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ 4-–π —É—Ä–æ–≤–µ–Ω—å (65 —Å–æ–æ–±—â–µ–Ω–∏–π)
        5: 400,    # –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ 5-–π —É—Ä–æ–≤–µ–Ω—å (105 —Å–æ–æ–±—â–µ–Ω–∏–π)
        6: 500,    # –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ 6-–π —É—Ä–æ–≤–µ–Ω—å (155 —Å–æ–æ–±—â–µ–Ω–∏–π)
        7: 600,    # –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ 7-–π —É—Ä–æ–≤–µ–Ω—å (215 —Å–æ–æ–±—â–µ–Ω–∏–π)
        8: 700,    # –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ 8-–π —É—Ä–æ–≤–µ–Ω—å (285 —Å–æ–æ–±—â–µ–Ω–∏–π)
        9: 800,    # –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ 9-–π —É—Ä–æ–≤–µ–Ω—å (355 —Å–æ–æ–±—â–µ–Ω–∏–π)
        10: 900,   # –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ 10-–π —É—Ä–æ–≤–µ–Ω—å (445 —Å–æ–æ–±—â–µ–Ω–∏–π)
        11: 1000   # –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ 11-–π —É—Ä–æ–≤–µ–Ω—å (545 —Å–æ–æ–±—â–µ–Ω–∏–π)
    }
    return rewards.get(level, 0)

def format_level_info(level, progress, extra_cycles=0):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–≤–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if level == 11:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
        if extra_cycles > 0:
            return f"üèÖ –£—Ä–æ–≤–µ–Ω—å: {level} (–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π + {extra_cycles} –Ω–∞–≥—Ä–∞–¥ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)\n"
        return f"üèÖ –£—Ä–æ–≤–µ–Ω—å: {level} (–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π)\n"
    else:
        next_level = level + 1
        return f"üèÖ –£—Ä–æ–≤–µ–Ω—å: {level}\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%‚úÖ –¥–æ {next_level} —É—Ä–æ–≤–Ω—è\n"

def calculate_initial_balance(comments):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    try:
        initial_balance = 0
        current_level = 0
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å
        requirements = get_level_requirements()
        for level in range(11, -1, -1):
            if comments >= requirements[level]:
                current_level = level
                break
                
        # –°—É–º–º–∏—Ä—É–µ–º –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –≤—Å–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–µ —É—Ä–æ–≤–Ω–∏
        for level in range(1, current_level + 1):
            initial_balance += calculate_level_reward(level)
            
        logging.info(f"calculate_initial_balance: comments={comments}, level={current_level}, balance={initial_balance}")
        return initial_balance, current_level
        
    except Exception as e:
        logging.error(f"Error in calculate_initial_balance: {e}")
        return 0, 0

def save_user_data(user_id, data):
    conn = mysql.connector.connect(**db_config)
    cursor = conn.cursor()
    try:
        cursor.execute("""
            INSERT INTO user_data (user_id, data)
            VALUES (%s, %s)
            ON DUPLICATE KEY UPDATE data = %s
        """, (user_id, json.dumps(data), json.dumps(data)))
        conn.commit()
    except Exception as e:
        logging.error(f"Error saving user data: {e}")
        conn.rollback()
    finally:
        cursor.close()
        conn.close()

def load_user_data(user_id):
    conn = mysql.connector.connect(**db_config)
    cursor = conn.cursor(dictionary=True)
    try:
        cursor.execute("SELECT data FROM user_data WHERE user_id = %s", (user_id,))
        row = cursor.fetchone()
        if row:
            return json.loads(row['data'])
        return None
    except Exception as e:
        logging.error(f"Error loading user data: {e}")
        return None
    finally:
        cursor.close()
        conn.close()

def get_referrals(user_id):
    try:
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)
        query = "SELECT username, first_name, last_name, join_date FROM users WHERE referred_by = %s"
        cursor.execute(query, (user_id,))
        referrals = cursor.fetchall()
        conn.close()
        return referrals
    except mysql.connector.Error as e:
        logging.error(f"Error getting referrals for user {user_id}: {e}")
        return []

def is_user_exists(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    conn = get_db_connection()
    if conn is None:
        return False
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM users WHERE user_id = %s", (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result is not None

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    try:
        conn = mysql.connector.connect(**db_config, connection_timeout=10)
        conn.ping(reconnect=True)
        return conn
    except Exception as e:
        logging.error(f"DB connection error: {e}")
        return None

def get_user(user_id): # (—Å—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ - load_user_data)
    try:
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)
        cursor.execute("SELECT * FROM users WHERE user_id = %s", (user_id,)) # SQL –∑–∞–ø—Ä–æ—Å —Å WHERE
        user = cursor.fetchone() # –ü–æ–ª—É—á–∞–µ–º –û–î–ù–û–ì–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        conn.close()
        return user
    except mysql.connector.Error as e:
        logging.error(f"Error getting user {user_id}: {e}")
        return None

def get_invited_users_from_db(user_id, offset=0, limit=5):
    logging.info(f"get_invited_users_from_db: user_id={user_id}")
    invited_users = []
    total = 0
    try:
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        cursor.execute("SELECT COUNT(*) as total FROM users WHERE referred_by = %s", (user_id,))
        result = cursor.fetchone()
        total = result['total'] if result else 0
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        query = """
            SELECT user_id, username, first_name, last_name, join_date 
            FROM users 
            WHERE referred_by = %s 
            ORDER BY join_date DESC 
            LIMIT %s OFFSET %s
        """
        cursor.execute(query, (user_id, limit, offset))
        invited_users = cursor.fetchall() or []
        
    except mysql.connector.Error as e:
        logging.error(f"get_invited_users_from_db: Database error: {e}")
    finally:
        if 'conn' in locals() and conn.is_connected():
            cursor.close()
            conn.close()
            
    return invited_users, total

def get_user_coupons(user_id): # –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    try:
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)
        cursor.execute("""
            SELECT * FROM coupons 
            WHERE user_id = %s 
            ORDER BY date DESC
        """, (user_id,))  # –î–æ–±–∞–≤–ª–µ–Ω ORDER BY date DESC
        coupons = cursor.fetchall()
        conn.close()
        return coupons
    except mysql.connector.Error as e:
        logging.error(f"Error getting coupons for user {user_id}: {e}")
        return []

def get_all_coupons(offset=0, limit=10):
    try:
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        cursor.execute("SELECT COUNT(*) as total FROM coupons")
        total = cursor.fetchone()['total']
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("""
            SELECT c.*, u.username 
            FROM coupons c 
            LEFT JOIN users u ON c.user_id = u.user_id 
            ORDER BY c.date DESC 
            LIMIT %s OFFSET %s
        """, (limit, offset))
        coupons = cursor.fetchall()
        conn.close()
        return coupons, total
    except mysql.connector.Error as e:
        logging.error(f"Error getting all coupons from db: {e}")
        return [], 0

def save_user(user):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        query = """
            INSERT INTO users (user_id, username, first_name, last_name, referrals, referral_link, balance, join_date, referred_by)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
            ON DUPLICATE KEY UPDATE
            username = VALUES(username), first_name = VALUES(first_name), last_name = VALUES(last_name), referrals = VALUES(referrals),
            referral_link = VALUES(referral_link), balance = VALUES(balance), join_date = VALUES(join_date), referred_by = VALUES(referred_by)
        """
        data = (user.get('user_id'), user.get('username'), user.get('first_name'), user.get('last_name'), user.get('referrals'), user.get('referral_link'), user.get('balance'), user.get('join_date'), user.get('referred_by'))
        logging.info(f"save_user: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞: {query} —Å –¥–∞–Ω–Ω—ã–º–∏: {data}")
        cursor.execute(query, data)
        conn.commit()
        return True
    except mysql.connector.Error as e:
        conn.rollback()
        logging.error(f"save_user: –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î: {e}")
        return False
    finally:
        if conn:
            conn.close()
        
# –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
def add_transaction(user_id: int, amount: int, reason: str):
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO transactions (user_id, amount, reason, date)
            VALUES (%s, %s, %s, %s)
        ''', (user_id, amount, reason, datetime.now()))
        conn.commit()
        conn.close()
        return True
    except mysql.connector.Error as e:
        logging.error(f"Error adding transaction: {e}")
        return False

def get_user_transactions(user_id: int, offset: int = 0, limit: int = 5):
    try:
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)
        cursor.execute('''
            SELECT * FROM transactions 
            WHERE user_id = %s 
            ORDER BY date DESC
            LIMIT %s OFFSET %s
        ''', (user_id, limit, offset))
        transactions = cursor.fetchall()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        cursor.execute('SELECT COUNT(*) as total FROM transactions WHERE user_id = %s', (user_id,))
        total = cursor.fetchone()['total']
        
        conn.close()
        return transactions, total
    except mysql.connector.Error as e:
        logging.error(f"Error getting transactions: {e}")
        return [], 0

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ (–¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞)
STATUS_PENDING = "üî¥–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏"
STATUS_APPROVED = "üü¢–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ"
STATUS_UNKNOWN = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫—É–ø–æ–Ω–æ–≤
def cleanup_coupons(context: CallbackContext):
    global coupons_data
    if not coupons_data: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É—Å—Ç –ª–∏ —Å–ø–∏—Å–æ–∫
        logging.info("–°–ø–∏—Å–æ–∫ –∫—É–ø–æ–Ω–æ–≤ –ø—É—Å—Ç, –æ—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
        return # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç

    now = datetime.now()
    coupons_data = [
        coupon for coupon in coupons_data if coupon['date'] + timedelta(days=30) > now
    ]
    save_coupons(coupons_data)
    logging.info("–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫—É–ø–æ–Ω–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É–ø–æ–Ω–æ–≤ (—Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º –¥–∞—Ç—ã)
def load_coupons():
    try:
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)
        cursor.execute('SELECT * FROM coupons')
        data = cursor.fetchall()
        conn.close()
        logging.debug(f"Loaded coupons data: {data}")
        return data
    except Exception as e:
        logging.error(f"Error loading coupons data: {e}")
        return []

def save_coupons(coupons):
    conn = get_db_connection()
    cursor = conn.cursor()
    for coupon in coupons:
        cursor.execute('''
            INSERT INTO coupons (coupon_id, amount, user_id, status, date)
            VALUES (%s, %s, %s, %s, %s)
            ON DUPLICATE KEY UPDATE
                amount=VALUES(amount),
                user_id=VALUES(user_id),
                status=VALUES(status),
                date=VALUES(date)
        ''', (coupon['coupon_id'], coupon['amount'], coupon['user_id'], coupon['status'], coupon['date']))
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—É–ø–æ–Ω–∞
def generate_coupon():
    return "VP" + "".join(random.choices(string.digits + string.ascii_uppercase, k=4))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π "–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç"
def create_profile_keyboard():
    keyboard = [[InlineKeyboardButton("üì±–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="my_profile")]]
    return InlineKeyboardMarkup(keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –≤ —Ä—É—Å—Å–∫–∏–π
def get_coupon_status_ru(status_en):
    return {
        "pending": STATUS_PENDING,
        "approved": STATUS_APPROVED,
    }.get(status_en, STATUS_UNKNOWN)

def get_user_activity(user_id):
    try:
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)
        cursor.execute("SELECT comments FROM user_activity WHERE user_id = %s", (user_id,))
        activity = cursor.fetchone()
        conn.close()
        return activity if activity else {"comments": 0}
    except mysql.connector.Error as e:
        logging.error(f"Error getting user activity for user {user_id}: {e}")
        return {"comments": 0}

def update_user_activity(user_id, comments=0, likes=0):
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO user_activity (user_id, comments, likes)
            VALUES (%s, %s, %s)
            ON DUPLICATE KEY UPDATE
                comments = comments + VALUES(comments),
                likes = likes + VALUES(likes)
        ''', (user_id, comments, likes))
        conn.commit()
        conn.close()
    except mysql.connector.Error as e:
        logging.error(f"Error updating user activity for user {user_id}: {e}")

def calculate_user_level(comments):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è"""
    logging.info(f"calculate_user_level –≤—ã–∑–≤–∞–Ω–∞ —Å comments={comments}")
    
    requirements = get_level_requirements()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    current_level = 0
    for level in range(11, -1, -1):  # –æ—Ç 11 –¥–æ 0
        if comments >= requirements[level]:
            current_level = level
            break
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
    if current_level == 11:
        extra_cycles = (comments - requirements[11]) // requirements[11]
        logging.info(f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å=11, extra_cycles={extra_cycles}")
        return (11, 100, extra_cycles)
        
    # –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    if current_level < 11:
        comments_for_current = requirements[current_level]
        comments_for_next = requirements[current_level + 1]
        comments_after_current = comments - comments_for_current
        comments_needed_for_next = comments_for_next - comments_for_current
        progress = (comments_after_current * 100) // comments_needed_for_next
    else:
        progress = 100

    logging.info(f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Ä–æ–≤–µ–Ω—å={current_level}, progress={progress}")
    return (current_level, progress, 0)

def get_leaderboard(offset=0, limit=10):
    try:
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        cursor.execute("SELECT COUNT(*) as total FROM user_activity")
        total = cursor.fetchone()['total']
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)
        cursor.execute("""
            SELECT user_id, comments
            FROM user_activity 
            ORDER BY comments DESC 
            LIMIT %s OFFSET %s
        """, (limit, offset))
        leaderboard = cursor.fetchall()
        conn.close()
        return leaderboard, total
    except mysql.connector.Error as e:
        logging.error(f"Error getting leaderboard: {e}")
        return [], 0


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def get_total_users():
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM users")
        total_users = cursor.fetchone()[0]
        conn.close()
        return total_users
    except mysql.connector.Error as e:
        logging.error(f"Error getting total users: {e}")
        return 0

def get_total_coupons():
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM coupons")
        total_coupons = cursor.fetchone()[0]
        conn.close()
        return total_coupons
    except mysql.connector.Error as e:
        logging.error(f"Error getting total coupons: {e}")
        return 0

def get_total_referrals():
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT SUM(referrals) FROM users")
        total_referrals = cursor.fetchone()[0]
        conn.close()
        return total_referrals
    except mysql.connector.Error as e:
        logging.error(f"Error getting total referrals: {e}")
        return 0

def get_approved_coupons():
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM coupons WHERE status = 'approved'")
        approved_coupons = cursor.fetchone()[0]
        conn.close()
        return approved_coupons
    except mysql.connector.Error as e:
        logging.error(f"Error getting approved coupons: {e}")
        return 0

def get_pending_coupons():
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM coupons WHERE status = 'pending'")
        pending_coupons = cursor.fetchone()[0]
        conn.close()
        return pending_coupons
    except mysql.connector.Error as e:
        logging.error(f"Error getting pending coupons: {e}")
        return 0

def get_pending_coupons_list(offset=0, limit=10):
    try:
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)
        
        # Get total count
        cursor.execute("SELECT COUNT(*) as total FROM coupons WHERE status = 'pending'")
        total = cursor.fetchone()['total']
        
        # Get page data
        cursor.execute("""
            SELECT c.*, u.username 
            FROM coupons c 
            LEFT JOIN users u ON c.user_id = u.user_id 
            WHERE c.status = 'pending'
            ORDER BY c.date DESC 
            LIMIT %s OFFSET %s
        """, (limit, offset))
        pending_coupons = cursor.fetchall()
        conn.close()
        return pending_coupons, total
    except mysql.connector.Error as e:
        logging.error(f"Error getting pending coupons: {e}")
        return [], 0

def get_active_coupons():
    try:
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)
        now = datetime.now()
        cursor.execute("SELECT COUNT(*) AS count FROM coupons WHERE date + INTERVAL 30 DAY > %s", (now,))
        result = cursor.fetchone()
        conn.close()
        if result:
            return result['count']
        else:
            return 0
    except mysql.connector.Error as e:
        logging.error(f"Error getting active coupons: {e}")
        return 0

def get_users_list(offset=0, limit=10, month_only=False):
    logging.info(f"get_users_list –≤—ã–∑–≤–∞–Ω–∞ (offset={offset}, limit={limit}, month_only={month_only})")
    try:
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        if month_only:
            one_month_ago = datetime.now() - timedelta(days=30)
            cursor.execute("SELECT COUNT(*) as total FROM users WHERE join_date >= %s", (one_month_ago,))
        else:
            cursor.execute("SELECT COUNT(*) as total FROM users")
        total = cursor.fetchone()['total']
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–∞–Ω–Ω—ã—Ö
        query = "SELECT user_id, username, first_name, last_name, join_date, balance FROM users"  # –î–æ–±–∞–≤–ª–µ–Ω—ã first_name –∏ last_name
        if month_only:
            query += " WHERE join_date >= %s"
            query += " ORDER BY join_date DESC LIMIT %s OFFSET %s"
            cursor.execute(query, (one_month_ago, limit, offset))
        else:
            query += " ORDER BY join_date DESC LIMIT %s OFFSET %s"
            cursor.execute(query, (limit, offset))
            
        users = cursor.fetchall()
        conn.close()
        return users, total
    except mysql.connector.Error as e:
        logging.error(f"get_users_list: –û—à–∏–±–∫–∞ –ë–î: {e}")
        return [], 0

def get_user_by_username(username):
    try:
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)
        cursor.execute("SELECT * FROM users WHERE username = %s", (username,))
        user = cursor.fetchone()
        conn.close()
        return user
    except mysql.connector.Error as e:
        logging.error(f"Error getting user by username {username}: {e}")
        return None

def freeze_user_account(user_id: int) -> bool:
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET is_frozen = TRUE WHERE user_id = %s", (user_id,))
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        logging.error(f"Error freezing user account {user_id}: {e}")
        return False

def unfreeze_user_account(user_id: int) -> bool:
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET is_frozen = FALSE WHERE user_id = %s", (user_id,))
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        logging.error(f"Error unfreezing user account {user_id}: {e}")
        return False

def is_account_frozen(user_id: int) -> bool:
    try:
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)
        cursor.execute("SELECT is_frozen FROM users WHERE user_id = %s", (user_id,))
        result = cursor.fetchone()
        conn.close()
        return result.get('is_frozen', False) if result else False
    except Exception as e:
        logging.error(f"Error checking account freeze status {user_id}: {e}")
        return False

def create_announcement(message: str) -> bool:
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("INSERT INTO announcements (message) VALUES (%s)", (message,))
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        logging.error(f"Error creating announcement: {e}")
        return False

def get_active_announcements() -> list:
    try:
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)
        cursor.execute("SELECT * FROM announcements WHERE is_active = TRUE ORDER BY created_at DESC")
        announcements = cursor.fetchall()
        conn.close()
        return announcements
    except Exception as e:
        logging.error(f"Error getting announcements: {e}")
        return []

def get_frozen_accounts_count():
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM users WHERE is_frozen = TRUE")
        count = cursor.fetchone()[0]
        conn.close()
        return count
    except Exception as e:
        logging.error(f"Error getting frozen accounts count: {e}")
        return 0

def get_frozen_accounts(offset=0, limit=10):
    try:
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)
        
        # Get total count
        cursor.execute("SELECT COUNT(*) as total FROM users WHERE is_frozen = TRUE")
        total = cursor.fetchone()['total']
        
        # Get page data
        cursor.execute("""
            SELECT user_id, username, first_name, last_name, join_date, balance 
            FROM users 
            WHERE is_frozen = TRUE 
            ORDER BY join_date DESC 
            LIMIT %s OFFSET %s
        """, (limit, offset))
        frozen_users = cursor.fetchall()
        conn.close()
        return frozen_users, total
    except Exception as e:
        logging.error(f"Error getting frozen accounts: {e}")
        return [], 0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
async def start(update: Update, context: CallbackContext):
    try:
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–º–æ—Ä–æ–∑–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞
        if is_account_frozen(user_id):
            await update.message.reply_text(
                "‚ùÑÔ∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω. "
                "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞. "
                "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç - @vdohnovenie_pro_chat"
            )
            return
        user = get_user(user_id)

        if user:
            return await my_profile(update, context)
            
        conn = None
        cursor = None
        try:
            conn = get_db_connection()
            cursor = conn.cursor(dictionary=True)
            
            user_tg = update.effective_user
            username = user_tg.username
            first_name = user_tg.first_name
            last_name = user_tg.last_name
            join_date = datetime.now()
            referral_link = f"https://t.me/{context.bot.username}?start={user_id}"

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
            referred_by = None
            if context.args:  # –ï—Å–ª–∏ –µ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –∫–æ–º–∞–Ω–¥–µ start
                try:
                    referred_by = int(context.args[0])
                    if referred_by == user_id:
                        referred_by = None
                    else:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        await context.bot.send_message(
                            chat_id=user_id,
                            text="ü•≥ –í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏ –≤–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ 2000 ‚ÇΩ\n"
                                 "–ù–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ –∫–Ω–æ–ø–∫—É \"–£–∑–Ω–∞—Ç—å –æ ‚ú®–í—Å–µ–ª–µ–Ω–Ω–∞—è–ü–æ–º–æ—â–∏‚ú®\" –∏ –¥–∞–ª–µ–µ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ \"–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç\", "
                                 "—á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤–∞—à –±–∞–ª–∞–Ω—Å"
                        )
                        logging.info(f"start: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º –±–æ–Ω—É—Å–µ")
                except ValueError:
                    logging.error(f"start: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥")
                    referred_by = None

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ temp_activity
            cursor.execute("SELECT * FROM temp_activity WHERE user_id = %s", (user_id,))
            temp_activity = cursor.fetchone()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
            initial_balance = 0
            level = 0
            if temp_activity:
                comments = temp_activity['comments']
                initial_balance, level = calculate_initial_balance(comments)
                logging.info(f"Found temp_activity: comments={comments}, calculated balance={initial_balance}, level={level}")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            new_user = {
                'user_id': user_id,
                'username': username,
                'first_name': first_name,
                'last_name': last_name,
                'join_date': join_date,
                'balance': initial_balance,
                'referrals': 0,
                'referral_link': referral_link,
                'referred_by': referred_by
            }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            save_user(new_user)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
            if referred_by:
                referrer = get_user(referred_by)
                if referrer:
                    referrer["referrals"] = (referrer.get("referrals", 0) or 0) + 1
                    referrer["balance"] = (referrer.get("balance", 0) or 0) + 2000
                    save_user(referrer)
                    add_transaction(referred_by, 2000, "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
                    keyboard = [[InlineKeyboardButton("üì±–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="my_profile")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await context.bot.send_message(
                        chat_id=referred_by,
                        text="ü•≥ –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n"
                            "–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ 2000 ‚ÇΩ.",
                        reply_markup=reply_markup,
                        parse_mode="HTML"
                    )

                    # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    new_user["balance"] = initial_balance + 2000
                    save_user(new_user)
                    add_transaction(user_id, 2000, "–ë–æ–Ω—É—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ")

            # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            if temp_activity:
                cursor.execute('''
                    INSERT INTO user_activity (user_id, comments, last_activity) 
                    VALUES (%s, %s, %s)
                ''', (user_id, temp_activity['comments'], temp_activity['last_activity']))
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ —É—Ä–æ–≤–Ω–∏
                for l in range(1, level + 1):
                    reward = calculate_level_reward(l)
                    add_transaction(user_id, reward, f"–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ {l} —É—Ä–æ–≤–Ω—è")
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                cursor.execute("DELETE FROM temp_activity WHERE user_id = %s", (user_id,))
                conn.commit()

            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∞
            message = (
                "üòä –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
                "–≠—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç —Å–∞–π—Ç–∞ vdohnovenie.pro –∏ –≥—Ä—É–ø–ø—ã Telegram @vdohnovenie_pro\n\n"
                "–ú—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É '<b>–í—Å–µ–ª–µ–Ω–Ω–∞—è–ü–æ–º–æ—â–∏</b>', –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "üí´ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã;\n"
                "üåü –¥–µ–ª–∞—Ç—å —Ä–∞—Å—á—ë—Ç—ã –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º: –≤–µ–¥–∏—á–µ—Å–∫–∏–µ –Ω–∞—É–∫–∏, –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—è, –±–∏–æ—Ä–∏—Ç–º—ã, –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—è, –≥–æ—Ä–æ—Å–∫–æ–ø—ã, –ª—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å;\n"
                "üí∞ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ –õ–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞, –∞ –∑–∞—Ç–µ–º —Ç—Ä–∞—Ç–∏—Ç—å –∏—Ö –Ω–∞ –ª—é–±—ã–µ —É—Å–ª—É–≥–∏ —Å –Ω–∞—à–µ–≥–æ —Å–∞–π—Ç–∞.\n\n"
                "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.üëá"
            )
            
            keyboard = [
                [InlineKeyboardButton("üëâ–£–∑–Ω–∞—Ç—å –æ ‚ú®–í—Å–µ–ª–µ–Ω–Ω–∞—è–ü–æ–º–æ—â–∏‚ú®", callback_data=f"join_referral_program_{user_id}")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            photo_path = "/var/www/admin78/data/www/vdohnovenie.pro/bot/photo/Unt1.jpg"

            if update.callback_query:
                await update.callback_query.message.delete()
                await context.bot.send_photo(
                    chat_id=update.callback_query.message.chat_id,
                    photo=open(photo_path, 'rb'),
                    caption=message,
                    reply_markup=reply_markup,
                    parse_mode="HTML"
                )
            else:
                await context.bot.send_photo(
                    chat_id=update.message.chat_id,
                    photo=open(photo_path, 'rb'),
                    caption=message,
                    reply_markup=reply_markup,
                    parse_mode="HTML"
                )

        except mysql.connector.Error as db_err:
            if conn:
                conn.rollback()
            logging.error(f"start: –û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {db_err}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–æ—à–∏–±–∫–∞ –ë–î). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        except Exception as e:
            if conn:
                conn.rollback()
            logging.exception(f"start: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        finally:
            if cursor:
                cursor.close()
            if conn:
                conn.close()

    except Exception as e:
        logging.exception(f"start: Outer error: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def process_registered_user_message(update, context, user):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        user_id = user['user_id']
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —É—Ä–æ–≤–µ–Ω—å
        old_activity = get_user_activity(user_id)
        old_level, _, _ = calculate_user_level(old_activity['comments'])
        logging.info(f"process_registered_user_message: old_level={old_level}, old_comments={old_activity['comments']}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        conn = get_db_connection()
        cursor = conn.cursor()
        try:
            cursor.execute('''
                INSERT INTO user_activity (user_id, comments, last_activity)
                VALUES (%s, 1, %s)
                ON DUPLICATE KEY UPDATE
                    comments = comments + 1,
                    last_activity = VALUES(last_activity)
            ''', (user_id, datetime.now()))
            conn.commit()
            logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        finally:
            cursor.close()
            conn.close()

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        new_activity = get_user_activity(user_id)
        new_level, _, _ = calculate_user_level(new_activity['comments'])
        logging.info(f"process_registered_user_message: new_level={new_level}, new_comments={new_activity['comments']}")
        
        # –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—Å–∏–ª—Å—è
        if new_level > old_level:
            reward = calculate_level_reward(new_level)
            logging.info(f"–ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è! –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É: {reward}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if 'balance' in user:
                user['balance'] = user.get('balance', 0) + reward
                save_user(user)
                add_transaction(user_id, reward, f"–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ {new_level} —É—Ä–æ–≤–Ω—è")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await notify_level_up(context, update, user_id, new_level, reward)
                logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            else:
                logging.error(f"–ö–ª—é—á 'balance' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_registered_user_message: {e}")
        logging.error(traceback.format_exc())

async def check_subscription(context: CallbackContext, user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        member = await context.bot.get_chat_member(chat_id=ALLOWED_GROUP_ID, user_id=user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

async def join_referral_program(update: Update, context: CallbackContext):
    logging.info("join_referral_program –≤—ã–∑–≤–∞–Ω–∞")
    try:
        user_id = update.callback_query.from_user.id
        await update.callback_query.answer()

        message = (
            "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ ‚ú®'–í—Å–µ–ª–µ–Ω–Ω–∞—è–ü–æ–º–æ—â–∏'‚ú®\n\n"
            "üåü –ù–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ - —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.\n\n"
            "üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:\n"
            "üîπ 2000‚ÇΩ –ø–æ–ª—É—á–∞–µ—Ç–µ –≤—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞\n"
            "üîπ 2000‚ÇΩ –ø–æ–ª—É—á–∞–µ—Ç –≤–∞—à –¥—Ä—É–≥ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ\n\n"
            "üí∞–ë–æ–Ω—É—Å—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å(‚ù§Ô∏è–ª–∞–π–∫–∏ –∏ üí¨–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏) –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ @vdohnovenie_pro. –ë–æ—Ç –±—É–¥–µ—Ç –ø–æ–≤—ã—à–∞—Ç—å –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –∏ –∑–∞ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å.\n"
            "üìà –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π:\n"
            "üîπ 50 ‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å - 1 —É—Ä–æ–≤–µ–Ω—å\n"
            "üîπ 100 ‚ÇΩ - 2 —É—Ä–æ–≤–µ–Ω—å\n"
            "üîπ 1000 ‚ÇΩ - 11 —É—Ä–æ–≤–µ–Ω—å\n\n"
            "üéÅ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            "üîπ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –∏ —Ç–µ—Å—Ç—ã.\n"
            "üîπ –ö—É–ø–æ–Ω—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã —É—Å–ª—É–≥.\n"
            "–í–∞—à –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç¬ª. –í—ã –º–æ–∂–µ—Ç–µ —Å–ø–∏—Å–∞—Ç—å –ª—é–±—É—é —Å—É–º–º—É —Å–æ —Å–≤–æ–µ–≥–æ —Å—á—ë—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É–ø–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ–ø–ª–∞—Ç—ã –ª—é–±–æ–π —É—Å–ª—É–≥–∏ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ.\n\n"
            "‚ùó–ß—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ, –≤—ã –¥–æ–ª–∂–Ω—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à—É –≥—Ä—É–ø–ø—É ‚Äî @vdohnovenie_pro\n\n"          
        )

        photo_path = "/var/www/admin78/data/www/vdohnovenie.pro/bot/photo/Unt2.jpg"
        
        referred_by_str = update.callback_query.data.split("_")[-1]
        if referred_by_str == "none":
            referred_by = None
        else:
            referred_by = int(referred_by_str)

        if referred_by is not None:
            keyboard = [
                [InlineKeyboardButton("‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data=f"confirm_join_referral_program_{referred_by}")],
                [InlineKeyboardButton("‚Ü©Ô∏è–ù–∞–∑–∞–¥", callback_data="event_return")]  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å "start" –Ω–∞ "event_return"
            ]
        else:
            keyboard = [
                [InlineKeyboardButton("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª–∞", callback_data="confirm_join_referral_program_none")],
                [InlineKeyboardButton("‚Ü©Ô∏è–ù–∞–∑–∞–¥", callback_data="event_return")]  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å "start" –Ω–∞ "event_return"
            ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        # –°–æ–∑–¥–∞–µ–º InputMediaPhoto –æ–±—ä–µ–∫—Ç
        from telegram import InputMediaPhoto
        media = InputMediaPhoto(
            media=open(photo_path, 'rb'),
            caption=message,
            parse_mode="HTML"
        )

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞
        await update.callback_query.message.edit_media(
            media=media,
            reply_markup=reply_markup
        )

    except Exception as e:
        logging.exception(f"join_referral_program: –û—à–∏–±–∫–∞: {e}")
        await update.callback_query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ
async def confirm_join_referral_program(update: Update, context: CallbackContext):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
    logging.info("confirm_join_referral_program: –ù–∞—á–∞–ª–æ")
    user_id = update.callback_query.from_user.id
    logging.info(f"confirm_join_referral_program: user_id = {user_id}")
    referred_by = None

    try:
        await update.callback_query.answer()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
        is_subscribed = await check_subscription(context, user_id)
        if not is_subscribed:
            message = (
                "‚ùó –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º "
                "–Ω–∞ –Ω–∞—à—É –≥—Ä—É–ø–ø—É @vdohnovenie_pro\n\n"
                "1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ @vdohnovenie_pro\n"
                "2Ô∏è‚É£ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≥—Ä—É–ø–ø—É\n"
                "3Ô∏è‚É£ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è\" –µ—â–µ —Ä–∞–∑"
            )
            keyboard = [
                [InlineKeyboardButton("üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É", url="https://t.me/vdohnovenie_pro")],
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=update.callback_query.data)],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="event_return")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            photo_path = "/var/www/admin78/data/www/vdohnovenie.pro/bot/photo/Unt2.jpg"
            media = InputMediaPhoto(media=open(photo_path, 'rb'), caption=message, parse_mode="HTML")
            await update.callback_query.message.edit_media(media=media, reply_markup=reply_markup)
            return

        referred_by_str = update.callback_query.data.split("_")[-1]
        try:
            referred_by = int(referred_by_str) if referred_by_str.isdigit() and referred_by_str != 'none' else None
            if referred_by == user_id:
                referred_by = None
        except ValueError:
            logging.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π referred_by_str: {referred_by_str}")
            referred_by = None

        user = get_user(user_id)
        if user:  # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if user.get("referred_by") is None:
                user["referred_by"] = referred_by
                save_user(user)
        elif referred_by is not None:  # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–º
            username = update.callback_query.from_user.username or "–ê–Ω–æ–Ω–∏–º"
            first_name = update.callback_query.from_user.first_name
            last_name = update.callback_query.from_user.last_name
            balance = 2000  # –ë–æ–Ω—É—Å –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
            referrer = get_user(referred_by)
            if referrer:
                referrer["referrals"] = (referrer.get("referrals", 0) or 0) + 1
                referrer["balance"] = (referrer.get("balance", 0) or 0) + 2000
                if not save_user(referrer):
                    logging.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞")
                    await context.bot.send_message(
                        chat_id="-1002382309656",
                        text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ {referred_by}"
                    )
                    return
                add_transaction(referred_by, 2000, "–ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            new_user = {
                "user_id": user_id,
                "username": username,
                "first_name": first_name,
                "last_name": last_name,
                "referrals": 0,
                "referral_link": f"https://t.me/vdohnoveniepro_bot?start={user_id}",
                "balance": balance,
                "referred_by": referred_by,
                "join_date": datetime.now().isoformat(),
            }
            if not save_user(new_user):
                await context.bot.send_message(
                    chat_id="-1002382309656",
                    text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
                )
                return
            add_transaction(user_id, 2000, "–ë–æ–Ω—É—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ")

            # –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await context.bot.send_message(
                chat_id=user_id,
                text="ü•≥ –í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏ –≤–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ 2000 ‚ÇΩ\n"
                     "–ù–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ –∫–Ω–æ–ø–∫—É \"–£–∑–Ω–∞—Ç—å –æ ‚ú®–í—Å–µ–ª–µ–Ω–Ω–∞—è–ü–æ–º–æ—â–∏‚ú®\" –∏ –¥–∞–ª–µ–µ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ \"–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç\", "
                     "—á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤–∞—à –±–∞–ª–∞–Ω—Å"
            )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
        success_message = (
            f"ü•≥ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n\n –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ ‚ú®'–í—Å–µ–ª–µ–Ω–Ω–∞—è–ü–æ–º–æ—â–∏'‚ú®.\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π, –∏—Å–ø–æ–ª—å–∑—É—è –≤–∞—à—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ "
            f"–∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–∞ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ '–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç' –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.üëá\n"
        )
        keyboard = [[InlineKeyboardButton("üì±–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="my_profile")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        photo_path = "/var/www/admin78/data/www/vdohnovenie.pro/bot/photo/Unt3.jpg"
        media = InputMediaPhoto(media=open(photo_path, 'rb'), caption=success_message, parse_mode="HTML")
        await update.callback_query.message.edit_media(media=media, reply_markup=reply_markup)

    except Exception as e:
        logging.exception(f"confirm_join_referral_program: –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        await context.bot.send_message(
            chat_id="-1002382309656",
            text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}"
        )
        await update.callback_query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
async def my_profile(update: Update, context: CallbackContext):
    if await check_frozen_status(update, context):
        return
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        is_subscribed = await check_and_notify_subscription(update, context)
        if not is_subscribed:
            return

        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–º–æ—Ä–æ–∑–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞
        if is_account_frozen(user_id):
            message = (
                "‚ùÑÔ∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω.\n\n"
                "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç - @vdohnovenie_pro_chat"
            )
            if update.callback_query:
                await update.callback_query.message.edit_text(message)
            else:
                await update.message.reply_text(message)
            return
        user = get_user(user_id)
        activity = get_user_activity(user_id)
        level = calculate_user_level(activity['comments'])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            user_tg = await context.bot.get_chat(user_id)
            first_name = user_tg.first_name or ""
            last_name = user_tg.last_name or ""
            full_name = f"{first_name} {last_name}".strip()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            full_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        recent_transactions, _ = get_user_transactions(user_id, 0, 3)
        
         # –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ —É—Ä–æ–≤–Ω—è
        total_points = activity['comments']
        level, progress, extra_cycles = calculate_user_level(total_points)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–≤–Ω–µ
        level_info = format_level_info(level, progress, extra_cycles)
        
        message = (
            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            f"<b>üí∞ –ë–∞–ª–∞–Ω—Å: {user.get('balance', 0)} ‚ÇΩ</b>\n"
            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å:</b> @{user.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"‚≠êÔ∏è –ò–º—è: {full_name}\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.get('join_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"         
            f"üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:</b>\n"
            f"ü§ù –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {user.get('referrals', 0)} —á–µ–ª–æ–≤–µ–∫\n"
            f"üîó –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–µ –¥—Ä—É–∑—å—è–ºüëá\n"
            f"<pre>{user.get('referral_link', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}</pre>\n"
            f"üíé –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ: 2000 ‚ÇΩ\n"
            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            f"üèÜ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n"
            f"{format_level_info(level, progress)}"
            f"üí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {activity['comments']}\n"
            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            f"‚ùì <i>–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –Ω–∞—à–ª–∏ –æ—à–∏–±–∫—É? üëâ <a href='https://t.me/vdohnovenie_pro_chat'>–ù–∞–ø–∏—Å–∞—Ç—å</a></i>\n"
            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            f"üí° <i>–ù–∞—à –ø–∞–±–ª–∏–∫ @vdohnovenie_pro</i>\n"
            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        )
        
        if recent_transactions:
            message += f"üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>\n"
            for trans in recent_transactions:
                date = trans['date'].strftime('%d.%m.%Y')
                amount = f"+{trans['amount']}" if trans['amount'] > 0 else f"{trans['amount']}"
                message += f"‚Ä¢ {date}: {amount}‚ÇΩ\n"
            message += "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"

        keyboard = [
            [
                InlineKeyboardButton("üîÑ–û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_balance"),
                InlineKeyboardButton("üí∞–ò—Å—Ç–æ—Ä–∏—è", callback_data="transaction_history")
            ],
            [
                InlineKeyboardButton("üë•–†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="my_invited_users"),
                InlineKeyboardButton("üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats")
            ],
            [
                InlineKeyboardButton("üéüÔ∏è–°–æ–∑–¥–∞—Ç—å –∫—É–ø–æ–Ω", callback_data="create_coupon"),
                InlineKeyboardButton("üóÉÔ∏è–ú–æ–∏ –∫—É–ø–æ–Ω—ã", callback_data="my_coupons")
            ],
            [InlineKeyboardButton("üìö –û ‚ú®–í—Å–µ–ª–µ–Ω–Ω–∞—è–ü–æ–º–æ—â–∏‚ú®", callback_data="about_program")],
            [InlineKeyboardButton("üóìÔ∏è–¢–µ—Å—Ç—ã –∏ —Ä–∞—Å—á–µ—Ç—ã", callback_data="show_tests")],
            [InlineKeyboardButton("‚ú®–ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥", url="https://t.me/vdohnoveniepro_bot/shop")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        photo_path = "/var/www/admin78/data/www/vdohnovenie.pro/bot/photo/Unt4.jpg"
        
        if update.callback_query:
            try:
                from telegram import InputMediaPhoto
                media = InputMediaPhoto(
                    media=open(photo_path, 'rb'),
                    caption=message,
                    parse_mode="HTML"
                )
                await update.callback_query.message.edit_media(
                    media=media,
                    reply_markup=reply_markup
                )
            except telegram.error.BadRequest as e:
                if "Message is not modified" in str(e):
                    await update.callback_query.answer("–ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω")
                else:
                    raise
        else:
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=open(photo_path, 'rb'),
                caption=message,
                reply_markup=reply_markup,
                parse_mode="HTML"
            )
        
    except Exception as e:
        logging.exception(f"my_profile: –û—à–∏–±–∫–∞: {e}")
        await update.effective_message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

async def show_about_program(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –í—Å–µ–ª–µ–Ω–Ω–∞—è–ü–æ–º–æ—â–∏"""
    try:
        message = (
            "‚ú® –û –ø—Ä–æ–≥—Ä–∞–º–º–µ '–í—Å–µ–ª–µ–Ω–Ω–∞—è–ü–æ–º–æ—â–∏' ‚ú®\n\n"
            "üåü –ù–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ - —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞\n\n"
            "üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:\n"
            "üîπ 2000‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–∞–µ—Ç–µ –≤—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞\n"
            "üîπ 2000‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–∞–µ—Ç –≤–∞—à –¥—Ä—É–≥ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ\n\n"
            "üí∞–ë–æ–Ω—É—Å—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å(‚ù§Ô∏è–ª–∞–π–∫–∏ –∏ üí¨–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏) –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ @vdohnovenie_pro. –ë–æ—Ç –±—É–¥–µ—Ç –ø–æ–≤—ã—à–∞—Ç—å –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –∏ –∑–∞ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å.\n"
            "üìà –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π:\n"
            "üîπ 50 ‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å - 1 —É—Ä–æ–≤–µ–Ω—å\n"
            "üîπ 100 ‚ÇΩ - 2 —É—Ä–æ–≤–µ–Ω—å\n"
            "üîπ 1000 ‚ÇΩ - 11 —É—Ä–æ–≤–µ–Ω—å\n\n"
            "üéÅ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            "üîπ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –∏ —Ç–µ—Å—Ç—ã.\n"
            "üîπ –ö—É–ø–æ–Ω—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã —É—Å–ª—É–≥.\n"
            "üîπ –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞.\n\n"
            "‚ùó–í—ã –º–æ–∂–µ—Ç–µ —Å–ø–∏—Å–∞—Ç—å –ª—é–±—É—é —Å—É–º–º—É —Å–æ —Å–≤–æ–µ–≥–æ —Å—á—ë—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É–ø–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ–ø–ª–∞—Ç—ã –ª—é–±–æ–π —É—Å–ª—É–≥–∏ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ (–∫–Ω–æ–ø–∫–∞ ¬´–ù–∞—à —Å–∞–π—Ç¬ª –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —ç—Ç–æ–≥–æ –±–æ—Ç–∞)."
        )

        keyboard = [
            [InlineKeyboardButton("‚ùì –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—É–ø–æ–Ω—ã?", callback_data="how_to_use_coupon")],
            [InlineKeyboardButton("‚Ü©Ô∏è–í –ø—Ä–æ—Ñ–∏–ª—å", callback_data="my_profile")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        photo_path = "/var/www/admin78/data/www/vdohnovenie.pro/bot/photo/Unt2.jpg"
        
        media = InputMediaPhoto(
            media=open(photo_path, 'rb'),
            caption=message,
            parse_mode="HTML"
        )
        
        await update.callback_query.message.edit_media(
            media=media,
            reply_markup=reply_markup
        )
        await update.callback_query.answer()

    except Exception as e:
        logging.error(f"Error in show_about_program: {e}")
        await update.effective_message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ")

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
async def refresh_profile(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'"""
    await my_profile(update, context)

async def show_stats(update: Update, context: CallbackContext):
    try:
        user_id = update.callback_query.from_user.id
        user = get_user(user_id)
        activity = get_user_activity(user_id)
        level_data = calculate_user_level(activity['comments'])  # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä—Ç–µ–∂
        level = level_data[0]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç (—É—Ä–æ–≤–µ–Ω—å)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –≤—Å–µ—Ö –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)
        cursor.execute("""
            SELECT SUM(amount) as total_earned 
            FROM transactions 
            WHERE user_id = %s AND amount > 0
        """, (user_id,))
        result = cursor.fetchone()
        total_earned = result['total_earned'] or 0
        conn.close()
        
        message = (
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
            f"üèÖ –£—Ä–æ–≤–µ–Ω—å: {level}\n"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
            f"üí≠ –í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {activity['comments']}\n"
            f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user.get('referrals', 0)}\n"
            f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Å–µ–≥–æ: {total_earned} ‚ÇΩ\n"
            f"üíµ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.get('balance', 0)} ‚ÇΩ\n"
        )
        
        keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è–ù–∞–∑–∞–¥", callback_data="my_profile")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        photo_path = "/var/www/admin78/data/www/vdohnovenie.pro/bot/photo/Unt10.jpg"
        
        media = InputMediaPhoto(
            media=open(photo_path, 'rb'),
            caption=message,
            parse_mode="HTML"
        )
        
        await update.callback_query.message.edit_media(
            media=media,
            reply_markup=reply_markup
        )
        await update.callback_query.answer()
        
    except Exception as e:
        logging.exception(f"show_stats: –û—à–∏–±–∫–∞: {e}")
        await update.callback_query.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö
async def get_invited_users(update: Update, context: CallbackContext):
    if await check_frozen_status(update, context):
        return
    logging.info("get_invited_users –≤—ã–∑–≤–∞–Ω–∞")
    try:
        user_id = update.callback_query.from_user.id
        page = context.user_data.get('invited_page', 0)
        
        if update.callback_query.data == "invited_next":
            page += 1
            context.user_data['invited_page'] = page
        elif update.callback_query.data == "invited_prev":
            page = max(0, page - 1)
            context.user_data['invited_page'] = page

        invited_users, total = get_invited_users_from_db(user_id, page * 5, 5)
        total_pages = (total - 1) // 5 + 1

        if not invited_users:
            message = (
                "üòî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n"
                "–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≤–∞—à –∫–∞–±–∏–Ω–µ—Ç (–∫–Ω–æ–ø–∫–∞ ‚Ü©Ô∏è–ù–∞–∑–∞–¥), —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à—É "
                "–ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –¥—Ä—É–∑—å—è–º.\n"
                "–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –≤–∞–º –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–æ 2000 ‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å ü§ó"
            )
            keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è–ù–∞–∑–∞–¥", callback_data="my_profile")]]
        else:
            message = f"üìã –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}):\n\n"
            for invited_user in invited_users:
                try:
                    user_tg = await context.bot.get_chat(invited_user['user_id'])
                    first_name = user_tg.first_name or ""
                    last_name = user_tg.last_name or ""
                    full_name = f"{first_name} {last_name}".strip()
                    username = invited_user.get('username', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
                    join_date = invited_user.get('join_date')
                    join_date_formatted = join_date.strftime("%d.%m.%Y") if join_date else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                    message += (
                        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
                        f"üìù –ò–º—è: {full_name}\n"
                        f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {join_date_formatted}\n"
                        f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                    )
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                    continue

            keyboard = []
            nav_buttons = []
            
            if page > 0:
                nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="invited_prev"))
            if (page + 1) * 5 < total:
                nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data="invited_next"))
            
            if nav_buttons:
                keyboard.append(nav_buttons)
            keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è–í –ø—Ä–æ—Ñ–∏–ª—å", callback_data="my_profile")])

        reply_markup = InlineKeyboardMarkup(keyboard)
        photo_path = "/var/www/admin78/data/www/vdohnovenie.pro/bot/photo/Unt5.jpg"
        
        from telegram import InputMediaPhoto
        media = InputMediaPhoto(
            media=open(photo_path, 'rb'),
            caption=message,
            parse_mode="HTML"
        )
        
        await update.callback_query.message.edit_media(
            media=media,
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –≤ get_invited_users: {e}")
        await update.effective_message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", parse_mode="HTML")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—É–ø–æ–Ω–∞ (–∏–∑–º–µ–Ω–µ–Ω–∞)
async def create_coupon(update: Update, context: CallbackContext):
    if await check_frozen_status(update, context):
        return
    user_id = update.effective_user.id
    if is_account_frozen(user_id):
        await update.callback_query.answer(
            "‚ùÑÔ∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω. "
            "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç - @vdohnovenie_pro_chat",
            show_alert=True
        )
        return
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫—É–ø–æ–Ω–∞"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Å–æ–∑–¥–∞–Ω–∏—è –∫—É–ø–æ–Ω–∞
    context.user_data['creating_coupon'] = True
    
    message = (
        "<b>üé´ –°–æ–∑–¥–∞–Ω–∏–µ –∫—É–ø–æ–Ω–∞</b>\n\n"
        "–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Å—É–º–º–æ–π, –ª–∏–±–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω—É–∂–Ω—É—é —Å—É–º–º—É –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∫—É–ø–æ–Ω –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500). "
        "–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ —á–∞—Å—Ç—å —Å—É–º–º—ã, —Ç–∞–∫ –∏ –ø–æ–ª–Ω–∞—è —Å—É–º–º–∞. "
    )
    keyboard = [
        [InlineKeyboardButton("1000 ‚ÇΩ", callback_data="coupon_amount_1000"),
         InlineKeyboardButton("1500 ‚ÇΩ", callback_data="coupon_amount_1500"),
         InlineKeyboardButton("2000 ‚ÇΩ", callback_data="coupon_amount_2000")],
        [InlineKeyboardButton("2500 ‚ÇΩ", callback_data="coupon_amount_2500"),
         InlineKeyboardButton("3000 ‚ÇΩ", callback_data="coupon_amount_3000"),
         InlineKeyboardButton("3500 ‚ÇΩ", callback_data="coupon_amount_3500")],
        [InlineKeyboardButton("4000 ‚ÇΩ", callback_data="coupon_amount_4000"),
         InlineKeyboardButton("4500 ‚ÇΩ", callback_data="coupon_amount_4500"),
         InlineKeyboardButton("5000 ‚ÇΩ", callback_data="coupon_amount_5000")],
        [InlineKeyboardButton("‚Ü©Ô∏è–ù–∞–∑–∞–¥", callback_data="my_profile")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    photo_path = "/var/www/admin78/data/www/vdohnovenie.pro/bot/photo/Unt6.jpg"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    coupon_message = await update.callback_query.message.edit_media(
        media=InputMediaPhoto(
            media=open(photo_path, 'rb'),
            caption=message,
            parse_mode="HTML"
        ),
        reply_markup=reply_markup
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —á–∞—Ç–∞
    context.user_data['coupon_message'] = coupon_message
    context.user_data['coupon_message_id'] = coupon_message.message_id
    context.user_data['coupon_chat_id'] = coupon_message.chat.id

async def handle_coupon_amount(update: Update, context: CallbackContext):
    if await check_frozen_status(update, context):
        return
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã –∫—É–ø–æ–Ω–∞"""
    logging.info(f"handle_coupon_amount called with update: {update}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –∫—É–ø–æ–Ω–∞
        if not context.user_data.get('creating_coupon'):
            if update.message:
                await update.message.delete()
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Å—É–º–º—ã (—Ç–µ–∫—Å—Ç –∏–ª–∏ –∫–Ω–æ–ø–∫–∞)
        if update.callback_query:
            amount = int(update.callback_query.data.split("_")[-1])
            message = update.callback_query.message
        else:
            try:
                amount = int(update.message.text)
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
                message = context.user_data.get('coupon_message')
                if not message:
                    if update.message:
                        await update.message.delete()
                    return
            except ValueError:
                if update.message:
                    await update.message.delete()
                return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = update.effective_user.id
        user = get_user(user_id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        if not user:
            await message.reply_text("‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        if amount <= 0:
            await message.reply_text("‚ùó–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
            return

        if amount > user.get('balance', 0):
            await message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")
            return

        # –°–æ–∑–¥–∞–µ–º –∫—É–ø–æ–Ω
        coupon = generate_coupon()
        coupon_data = {
            "coupon_id": coupon,
            "amount": amount,
            "user_id": user_id,
            "status": "pending",
            "date": datetime.now()
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        conn = get_db_connection()
        cursor = conn.cursor()
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É–ø–æ–Ω
            cursor.execute('''
                INSERT INTO coupons (coupon_id, amount, user_id, status, date)
                VALUES (%s, %s, %s, %s, %s)
            ''', (coupon_data['coupon_id'], coupon_data['amount'], 
                  coupon_data['user_id'], coupon_data['status'], 
                  coupon_data['date']))
            conn.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            admin_message = (
                f"<b>‚ùó–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫—É–ø–æ–Ω–∞ (üî¥–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏)</b>\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.get('username', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')} (ID: {user_id})\n"
                f"–°—É–º–º–∞: {amount}—Ä.\n"
                f"–ù–æ–º–µ—Ä –∫—É–ø–æ–Ω–∞: {coupon}\n"
                f"–î–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞: {coupon_data['date'].strftime('%d.%m.%Y %H:%M')}"
            )

            admin_keyboard = [
                [InlineKeyboardButton("‚úÖ–°–æ–∑–¥–∞—Ç—å –∫—É–ø–æ–Ω", callback_data=f"approve_coupon_{coupon}")],
                [InlineKeyboardButton("‚ùå–£–¥–∞–ª–∏—Ç—å –∫—É–ø–æ–Ω", callback_data=f"delete_coupon_{coupon}")],
                [InlineKeyboardButton("üë§–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ü—Ä–æ—Ñ–∏–ª—å", callback_data=f"view_profile_{user_id}")]
            ]
            admin_markup = InlineKeyboardMarkup(admin_keyboard)

            await context.bot.send_message(
                chat_id="-1002382309656", 
                text=admin_message, 
                reply_markup=admin_markup, 
                parse_mode="HTML"
            )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            success_message = (
                "üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –∫—É–ø–æ–Ω!\n"
                "–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
                "–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç."
            )

            keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è–ù–∞–∑–∞–¥", callback_data="my_profile")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            photo_path = "/var/www/admin78/data/www/vdohnovenie.pro/bot/photo/Unt7.jpg"
            media = InputMediaPhoto(
                media=open(photo_path, 'rb'),
                caption=success_message,
                parse_mode="HTML"
            )

            await message.edit_media(
                media=media,
                reply_markup=reply_markup
            )

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å—É–º–º–æ–π
            if update.message:
                await update.message.delete()

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Å–æ–∑–¥–∞–Ω–∏—è –∫—É–ø–æ–Ω–∞
            context.user_data['creating_coupon'] = False
            
        except Exception as e:
            logging.error(f"Error creating coupon: {e}")
            if conn:
                conn.rollback()
            await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—É–ø–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        finally:
            if conn:
                conn.close()

    except Exception as e:
        logging.error(f"Outer error in handle_coupon_amount: {e}")
        if update.callback_query:
            await update.callback_query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        elif update.message:
            await update.message.delete()

async def view_profile(update: Update, context: CallbackContext):
    logging.info("view_profile –≤—ã–∑–≤–∞–Ω–∞")
    try:
        user_id = int(update.callback_query.data.split("_")[-1])
        logging.info(f"view_profile: user_id = {user_id}")

        user = get_user(user_id)
        if not user:
            await update.callback_query.answer("‚õî –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        try:
            user_tg = await context.bot.get_chat(user_id)
            first_name = user_tg.first_name or ""
            last_name = user_tg.last_name or ""
            full_name = f"{first_name} {last_name}".strip()
        except Exception as e:
            logging.error(f"view_profile: Error getting user info: {e}")
            full_name = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        invited_users, total = get_invited_users_from_db(user_id)
        invited_users_list = []

        for invited_user in invited_users:
            try:
                user_tg_invited = await context.bot.get_chat(invited_user['user_id'])
                full_name_invited = f"{user_tg_invited.first_name or ''} {user_tg_invited.last_name or ''}".strip()
                username = invited_user.get('username', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
                join_date = invited_user.get('join_date')
                join_date_formatted = join_date.strftime("%d.%m.%Y") if join_date else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                invited_users_list.append(f"@{username} - {full_name_invited} - {join_date_formatted}")
            except Exception as e:
                logging.error(f"Error processing invited user {invited_user.get('user_id')}: {e}")
                continue

        invited_users_message = "\n".join(invited_users_list) if invited_users_list else "–ù–µ—Ç –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."

        # –ü–æ–ª—É—á–∞–µ–º –∫—É–ø–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_coupons = get_user_coupons(user_id)
        coupons_message = ""
        if user_coupons:
            coupons_message = "\n".join([
                f"–ö—É–ø–æ–Ω: {coupon['coupon_id']} - –°—É–º–º–∞: {coupon['amount']}—Ä. - –°—Ç–∞—Ç—É—Å: {get_coupon_status_ru(coupon['status'])}"
                for coupon in user_coupons
            ])
        else:
            coupons_message = "–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫—É–ø–æ–Ω–æ–≤."

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —É—Ä–æ–≤–µ–Ω—å
        activity = get_user_activity(user_id)
        level = calculate_user_level(activity['comments'])

        message = (
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{user.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
            f"‚≠ê –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {full_name}\n"
            f"üíµ –ë–∞–ª–∞–Ω—Å: {user.get('balance', 0)} ‚ÇΩ\n"
            f"üèÖ –£—Ä–æ–≤–µ–Ω—å: {level}\n\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.get('join_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö: {total}\n"
            f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {user.get('referral_link', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
            f"üìã –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{invited_users_message}\n\n"
            f"Ô∏èüéüÔ∏è –ö—É–ø–æ–Ω—ã:\n{coupons_message}"
        )

        keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è–ù–∞–∑–∞–¥", callback_data="pending_coupons")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.callback_query.answer()
        await context.bot.send_message(
            chat_id=update.callback_query.message.chat_id,
            text=message,
            reply_markup=reply_markup,
            parse_mode="HTML"
        )

    except Exception as e:
        logging.exception(f"view_profile: –í–Ω–µ—à–Ω—è—è –æ—à–∏–±–∫–∞: {e}")
        await update.effective_message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", parse_mode="HTML")

async def approve_coupon(update: Update, context: CallbackContext):
    logging.info("approve_coupon –≤—ã–∑–≤–∞–Ω–∞")
    try:
        await update.callback_query.answer()
        coupon_id = update.callback_query.data.split("_")[-1]

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫—É–ø–æ–Ω–∞ –∏–∑ –ë–î
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)
        cursor.execute("SELECT * FROM coupons WHERE coupon_id = %s", (coupon_id,))
        coupon = cursor.fetchone()
        conn.close()

        if not coupon:
            await update.callback_query.message.reply_text("‚ùå –ö—É–ø–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        if coupon['status'] != "pending":
            await update.callback_query.message.reply_text("‚ùå –ö—É–ø–æ–Ω —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
            return

        user_db = get_user(coupon['user_id'])
        if user_db:
            if user_db.get('balance', 0) < coupon['amount']:
                await update.callback_query.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –∫—É–ø–æ–Ω–∞.")
                return

            try:
                if 'balance' in user_db:
                    user_db['balance'] -= coupon['amount']
                    save_user(user_db)
                    add_transaction(user_db['user_id'], -coupon['amount'], f"–°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫—É–ø–æ–Ω {coupon['coupon_id']}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫—É–ø–æ–Ω–∞ –≤ –ë–î
                    conn = get_db_connection()
                    cursor = conn.cursor()
                    cursor.execute("UPDATE coupons SET status = 'approved' WHERE coupon_id = %s", (coupon_id,))
                    conn.commit()
                    conn.close()

                    logging.info(f"approve_coupon: –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_db.get('user_id')} —É—Å–ø–µ—à–Ω–æ —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ {coupon['amount']}")
                else:
                    logging.error(f"approve_coupon: —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {coupon['user_id']} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'balance'")
                    await context.bot.send_message(chat_id="-1002382309656", text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {coupon['user_id']}. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'balance'.")
                    return

            except Exception as save_user_error:
                logging.exception(f"approve_coupon: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {save_user_error}")
                await context.bot.send_message(chat_id="-1002382309656", text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {coupon['user_id']}: {save_user_error}")
                return

            coupon['status'] = "approved"
            logging.info(f"approve_coupon: –°—Ç–∞—Ç—É—Å –∫—É–ø–æ–Ω–∞ {coupon_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'approved'")

            # *** –í–´–ó–û–í notify_balance_update –ó–î–ï–°–¨ ***
            amount = -coupon['amount']  # –î–µ–ª–∞–µ–º amount –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
            user_id = coupon['user_id']
            reason = f"–°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫—É–ø–æ–Ω {coupon['coupon_id']}"
            if not await notify_balance_update(context, user_id, amount, reason):
                logging.error(f"approve_coupon: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                await context.bot.send_message(chat_id="-1002382309656", text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            else:
                logging.info(f"approve_coupon: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

            try:
                user_tg = await context.bot.get_chat(coupon.get('user_id'))
                formatted_date = coupon.get('date')
                formatted_date_str = formatted_date.strftime('%d.%m.%Y') if formatted_date else "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

                user_message = (
                    f"ü•≥ –í–∞—à –∫—É–ø–æ–Ω —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω!\n\n"
                    f"Ô∏èüéüÔ∏è –ù–æ–º–µ—Ä(–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å): <pre>{coupon.get('coupon_id')}</pre>\n"
                    f"üí∞ –°—É–º–º–∞: {coupon.get('amount', 0)} ‚ÇΩ\n"
                    f"üìÖ –î–∞—Ç–∞: {formatted_date_str}\n\n"
                    f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–º –ø—Ä–∏ –∑–∞–∫–∞–∑–µ —É—Å–ª—É–≥–∏ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ. "
                    f"–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä –∫—É–ø–æ–Ω–∞ –≤—ã—à–µ —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –ø–æ–ª–µ \"–î–æ–±–∞–≤–∏—Ç—å –∫—É–ø–æ–Ω\" –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ–π –≤–∞–º —É—Å–ª—É–≥–∏.\n\n"
                    f"–í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ \"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ö—É–ø–æ–Ω\" –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª \"–£—Å–ª—É–≥–∏\".\n\n"
                    f"‚ùó –ö—É–ø–æ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–∏ 1 –º–µ—Å—è—Ü–∞ —Å –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è"
                )
                user_keyboard = [
                    [InlineKeyboardButton("‚ùì–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—É–ø–æ–Ω?", callback_data="how_to_use_coupon")],
                    [InlineKeyboardButton("‚ú®–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ö—É–ø–æ–Ω", url="https://t.me/vdohnoveniepro_bot/shop")],
                    [InlineKeyboardButton("üì±–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="my_profile")]
                ]
                user_markup = InlineKeyboardMarkup(user_keyboard)

                photo_path = "/var/www/admin78/data/www/vdohnovenie.pro/bot/photo/Unt12.jpg"

                await context.bot.send_photo(
                    chat_id=user_tg.id,
                    photo=open(photo_path, 'rb'),
                    caption=user_message,
                    reply_markup=user_markup,
                    parse_mode="HTML"
                )

            except BadRequest as e:
                logging.error(f"approve_coupon: BadRequest –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {coupon.get('user_id')}: {e}")
                await context.bot.send_message(chat_id="-1002382309656", text=f"–û—à–∏–±–∫–∞ BadRequest –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {coupon.get('user_id')}: {e}")
            except TelegramError as e:
                logging.error(f"approve_coupon: TelegramError –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {coupon.get('user_id')}: {e}")
                await context.bot.send_message(chat_id="-1002382309656", text=f"–û—à–∏–±–∫–∞ TelegramError –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {coupon.get('user_id')}: {e}")
            except Exception as e:
                logging.exception(f"approve_coupon: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {coupon.get('user_id')}: {e}")
                await context.bot.send_message(chat_id="-1002382309656", text=f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {coupon.get('user_id')}: {e}")

        # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        admin_message_id = context.user_data.get(f"admin_message_{coupon_id}")
        if admin_message_id:
            status_ru = get_coupon_status_ru(coupon.get('status'))
            formatted_date = coupon.get('date')
            formatted_date_str = formatted_date.strftime('%d.%m.%Y %H:%M') if formatted_date else "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

            admin_message = (
                f"<b>–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫—É–ø–æ–Ω–∞ ({status_ru})</b>\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user_db.get('username', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')} (ID: {coupon.get('user_id')})\n"
                f"–°—É–º–º–∞: {coupon.get('amount', 0)}—Ä.\n"
                f"–ù–æ–º–µ—Ä –∫—É–ø–æ–Ω–∞: {coupon.get('coupon_id')}\n"
                f"–î–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞: {formatted_date_str}"
            )
            admin_keyboard = [
                [InlineKeyboardButton("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")],
                [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ü—Ä–æ—Ñ–∏–ª—å", callback_data=f"view_profile_{coupon.get('user_id')}")]
            ]
            admin_markup = InlineKeyboardMarkup(admin_keyboard)
            try:
                await context.bot.edit_message_text(
                    chat_id=update.callback_query.message.chat_id,
                    message_id=update.callback_query.message.message_id,
                    text=admin_message,
                    reply_markup=admin_markup,
                    parse_mode="HTML"
                )
            except BadRequest as e:
                logging.error(f"approve_coupon: BadRequest –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")
            except TelegramError as e:
                logging.error(f"approve_coupon: TelegramError –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")
            except Exception as e:
                logging.exception(f"approve_coupon: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")

    except mysql.connector.Error as e:
        logging.error(f"approve_coupon: –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        if conn:
            conn.close()
            logging.info("approve_coupon: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")

async def all_coupons(update: Update, context: CallbackContext):
    logging.info("all_coupons –≤—ã–∑–≤–∞–Ω–∞")
    try:
        page = context.user_data.get('coupons_page', 0)
        
        if update.callback_query.data == "coupons_next":
            page += 1
            context.user_data['coupons_page'] = page
        elif update.callback_query.data == "coupons_prev":
            page = max(0, page - 1)
            context.user_data['coupons_page'] = page

        coupons, total = get_all_coupons(page * 10, 10)
        total_pages = (total - 1) // 10 + 1

        if not coupons:
            message = "–°–ø–∏—Å–æ–∫ –∫—É–ø–æ–Ω–æ–≤ –ø—É—Å—Ç."
            keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è–ù–∞–∑–∞–¥", callback_data="admin_panel")]]
        else:
            message = f"<b>üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫—É–ø–æ–Ω–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}):</b>\n\n"
            for coupon in coupons:
                status_ru = get_coupon_status_ru(coupon['status'])
                date_str = coupon.get('date')
                formatted_date = date_str.strftime('%d.%m.%Y %H:%M') if date_str else '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'
                message += (
                    f"üéüÔ∏è –ù–æ–º–µ—Ä: {coupon['coupon_id']}\n"
                    f"üí∞ –°—É–º–º–∞: {coupon['amount']}—Ä.\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{coupon.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    f"üìÖ –î–∞—Ç–∞: {formatted_date}\n"
                    f"üìå –°—Ç–∞—Ç—É—Å: {status_ru}\n"
                    f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                )

            keyboard = []
            nav_buttons = []
            
            if page > 0:
                nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="coupons_prev"))
            if (page + 1) * 10 < total:
                nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data="coupons_next"))
            
            if nav_buttons:
                keyboard.append(nav_buttons)
            keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è–í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.message.edit_text(
            message,
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
        await update.callback_query.answer()

    except Exception as e:
        logging.exception(f"all_coupons: –û—à–∏–±–∫–∞: {e}")
        await update.effective_message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


async def delete_coupon(update: Update, context: CallbackContext):
    logging.info("delete_coupon –≤—ã–∑–≤–∞–Ω–∞")
    conn = None
    try:
        await update.callback_query.answer()
        coupon_id = update.callback_query.data.split("_")[-1]

        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)
        cursor.execute("SELECT * FROM coupons WHERE coupon_id = %s", (coupon_id,))
        coupon = cursor.fetchone()

        if not coupon:
            await update.callback_query.message.reply_text("‚ùå –ö—É–ø–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        cursor.execute("DELETE FROM coupons WHERE coupon_id = %s", (coupon_id,))
        conn.commit()

        user_db = get_user(coupon.get('user_id'))  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ user_id
        if user_db:
            try:
                user_tg = await context.bot.get_chat(coupon.get('user_id'))
                user_message = (
                    f"‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫—É–ø–æ–Ω–∞ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
                    f"Ô∏èüéüÔ∏è {coupon.get('coupon_id')} –Ω–∞ —Å—É–º–º—É {coupon.get('amount', 0)} ‚ÇΩ –±—ã–ª —É–¥–∞–ª–µ–Ω.\n\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. - @vdohnovenie_pro_chat"
                )
                user_keyboard = [[InlineKeyboardButton("üì±–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="my_profile")]]
                user_markup = InlineKeyboardMarkup(user_keyboard)
                await context.bot.send_message(chat_id=user_tg.id, text=user_message, reply_markup=user_markup, parse_mode="HTML")

            except BadRequest as e:
                logging.error(f"delete_coupon: BadRequest –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {coupon.get('user_id')}: {e}")
                await context.bot.send_message(chat_id="-1002382309656", text=f"–û—à–∏–±–∫–∞ BadRequest –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {coupon.get('user_id')}: {e}")
            except TelegramError as e:
                logging.error(f"delete_coupon: TelegramError –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {coupon.get('user_id')}: {e}")
                await context.bot.send_message(chat_id="-1002382309656", text=f"–û—à–∏–±–∫–∞ TelegramError –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {coupon.get('user_id')}: {e}")
            except Exception as e:
                logging.exception(f"delete_coupon: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {coupon.get('user_id')}: {e}")
                await context.bot.send_message(chat_id="-1002382309656", text=f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {coupon.get('user_id')}: {e}")

        # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        admin_message_id = context.user_data.get(f"admin_message_{coupon_id}")
        if admin_message_id:
            formatted_date = coupon.get('date')
            formatted_date_str = formatted_date.strftime('%d.%m.%Y %H:%M') if formatted_date else "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

            admin_message = (
                f"<b>–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫—É–ø–æ–Ω–∞ (‚ùå–£–¥–∞–ª–µ–Ω)</b>\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user_db.get('username', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')} (ID: {coupon.get('user_id')})\n"
                f"–°—É–º–º–∞: {coupon.get('amount', 0)}—Ä.\n"
                f"–ù–æ–º–µ—Ä –∫—É–ø–æ–Ω–∞: {coupon.get('coupon_id')}\n"
                f"–î–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞: {formatted_date_str}"
            )
            admin_keyboard = [
                [InlineKeyboardButton("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")],
                [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ü—Ä–æ—Ñ–∏–ª—å", callback_data=f"view_profile_{coupon.get('user_id')}")]
            ]
            admin_markup = InlineKeyboardMarkup(admin_keyboard)
            await context.bot.edit_message_text(chat_id=update.callback_query.message.chat_id, message_id=update.callback_query.message.message_id, text=admin_message, reply_markup=admin_markup, parse_mode="HTML")

    except mysql.connector.Error as e:
        logging.error(f"delete_coupon: –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    except Exception as e:
        logging.exception(f"delete_coupon: –í–Ω–µ—à–Ω—è—è –æ—à–∏–±–∫–∞: {e}")
        await update.effective_message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", parse_mode="HTML")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–∏—Ö –∫—É–ø–æ–Ω–æ–≤ (–¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞)
async def my_coupons(update: Update, context: CallbackContext):
    if await check_frozen_status(update, context):
        return
    logging.info("my_coupons –≤—ã–∑–≤–∞–Ω–∞")
    user_id = update.callback_query.from_user.id
    
    try:
        page = context.user_data.get('my_coupons_page', 0)
        
        if update.callback_query.data == "my_coupons_next":
            page += 1
            context.user_data['my_coupons_page'] = page
        elif update.callback_query.data == "my_coupons_prev":
            page = max(0, page - 1)
            context.user_data['my_coupons_page'] = page
            
        user_coupons = get_user_coupons(user_id)
        total_coupons = len(user_coupons)
        total_pages = (total_coupons - 1) // 5 + 1 if total_coupons > 0 else 1
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—É–ø–æ–Ω—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_idx = page * 5
        end_idx = start_idx + 5
        current_page_coupons = user_coupons[start_idx:end_idx]

        keyboard = []
        if not user_coupons:
            message = (
                "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫—É–ø–æ–Ω–æ–≤.\n\n"
                "–í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥ –∏ –µ—Å–ª–∏ –≤–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞—Ç—å –∫—É–ø–æ–Ω, "
                "–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–°–æ–∑–¥–∞—Ç—å –∫—É–ø–æ–Ω\".\n\n"
                "–ï—Å–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π ‚Äî "
                "–∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–∏—Ç—Å—è –Ω–∞ 2000 ‚ÇΩ."
            )
            keyboard = [
                [InlineKeyboardButton("‚ùì –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—É–ø–æ–Ω—ã?", callback_data="how_to_use_coupon")],
                [InlineKeyboardButton("‚Ü©Ô∏è–ù–∞–∑–∞–¥", callback_data="my_profile")]
                ]
        else:
            message = f"üéüÔ∏è <b>–í–∞—à–∏ –∫—É–ø–æ–Ω—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}):</b>\n\n"
            for coupon in current_page_coupons:
                status_ru = get_coupon_status_ru(coupon['status'])
                message += (
                    f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                    f"üìù –ù–æ–º–µ—Ä: <pre>{coupon['coupon_id']}</pre> ‚¨ÖÔ∏è–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å\n"
                    f"üí∞ –°—É–º–º–∞: {coupon['amount']}‚ÇΩ\n"
                    f"üìÖ –°–æ–∑–¥–∞–Ω: {coupon['date'].strftime('%d.%m.%Y')}\n"
                    f"üìå –°—Ç–∞—Ç—É—Å: {status_ru}\n"
                )
            
            message += (
                "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"
                "‚òùÔ∏è–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä –∫—É–ø–æ–Ω–∞, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ.\n\n"
                "‚ùó –í–ù–ò–ú–ê–ù–ò–ï ‚ùó\n"
                "‚Ä¢ –ö—É–ø–æ–Ω—ã 'üî¥–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏' - –ø—Ä–æ—Ö–æ–¥—è—Ç –ø—Ä–æ–≤–µ—Ä–∫—É\n"
                "‚Ä¢ –ö—É–ø–æ–Ω—ã 'üü¢–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ' - –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å\n"
                "‚Ä¢ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è - 1 –º–µ—Å—è—Ü —Å –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è"
            )

            # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            nav_buttons = []
            if page > 0:
                nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="my_coupons_prev"))
            if (page + 1) * 5 < total_coupons:
                nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data="my_coupons_next"))
            
            if nav_buttons:
                keyboard.append(nav_buttons)
                
            keyboard.extend([
                [InlineKeyboardButton("‚ùì –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—É–ø–æ–Ω?", callback_data="how_to_use_coupon")],
                [InlineKeyboardButton("‚ú® –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ö—É–ø–æ–Ω", url="https://t.me/vdohnoveniepro_bot/shop")],
                [InlineKeyboardButton("‚Ü©Ô∏è–ù–∞–∑–∞–¥", callback_data="my_profile")]
            ])

        reply_markup = InlineKeyboardMarkup(keyboard)
        photo_path = "/var/www/admin78/data/www/vdohnovenie.pro/bot/photo/Unt9.jpg"

        with open(photo_path, 'rb') as photo:
            media = InputMediaPhoto(
                media=photo,
                caption=message,
                parse_mode="HTML"
            )
            await update.callback_query.message.edit_media(
                media=media,
                reply_markup=reply_markup
            )
        await update.callback_query.answer()

    except Exception as e:
        logging.error(f"Error in my_coupons: {e}")
        await update.callback_query.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫—É–ø–æ–Ω–æ–≤: {e}")

async def copy_coupon(update: Update, context: CallbackContext):
    logging.info("copy_coupon –≤—ã–∑–≤–∞–Ω–∞")
    coupon_id = update.callback_query.data.split("_")[-1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫—É–ø–æ–Ω–∞
    await update.callback_query.message.reply_text(f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä –∏ –æ–Ω –±—É–¥–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω ‚û°Ô∏è <code>{coupon_id}</code>", parse_mode="HTML")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º
    await update.callback_query.answer()
    await context.bot.send_message(chat_id=update.callback_query.from_user.id, text=coupon_id)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—É–ø–æ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
async def show_coupon_instructions(update: Update, context: CallbackContext):
    try:
        message = (
            "<b>‚¨ÜÔ∏è –í–ò–î–ï–û –ò–ù–°–¢–†–£–ö–¶–ò–Ø ‚òùÔ∏è</b>\n\n"
            "üìñ <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—É–ø–æ–Ω:</b>\n\n"
            "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä –∫—É–ø–æ–Ω–∞ —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ\n\n"
            "2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ö—É–ø–æ–Ω' –∏–ª–∏ '–ù–∞—à –°–∞–π—Ç' –≤–Ω–∏–∑—É —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É –Ω–∞ —Å–∞–π—Ç–µ\n\n"
            "3Ô∏è‚É£ –ü—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –Ω–∞–π–¥–∏—Ç–µ –ø–æ–ª–µ '–î–æ–±–∞–≤–∏—Ç—å –∫—É–ø–æ–Ω' –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä\n\n"
            "4Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫—É–ø–æ–Ω' - —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–º–µ–Ω—å—à–∏—Ç—Å—è\n\n"
            "5Ô∏è‚É£ –ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n\n"
            "‚ùó –í–∞–∂–Ω–æ: –∫—É–ø–æ–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç 1 –º–µ—Å—è—Ü —Å –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è"
        )

        # –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É
        video_path = "/var/www/admin78/data/www/vdohnovenie.pro/bot/video/instruction.mp4"
        
        keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è–ù–∞–∑–∞–¥ –∫ –∫—É–ø–æ–Ω–∞–º", callback_data="my_coupons")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —à–∏—Ä–∏–Ω—ã –∏ –≤—ã—Å–æ—Ç—ã
        with open(video_path, 'rb') as video:
            await update.callback_query.message.edit_media(
                media=InputMediaVideo(
                    media=video,
                    caption=message,
                    parse_mode="HTML",
                    width=592,     # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞
                    height=1280,   # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞
                    supports_streaming=True  # –í–∞–∂–Ω–æ –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
                ),
                reply_markup=reply_markup
            )
        await update.callback_query.answer()

    except Exception as e:
        logging.error(f"Error in show_coupon_instructions: {e}")
        await update.callback_query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
async def refresh_balance(update: Update, context: CallbackContext):
    logging.info("refresh_balance –≤—ã–∑–≤–∞–Ω–∞")
    try:
        await my_profile(update, context)
    except BadRequest as e:
        logging.error(f"refresh_balance: BadRequest: {e}")
        await update.effective_message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ (BadRequest): {e}", parse_mode="HTML")
    except TelegramError as e:
        logging.error(f"refresh_balance: TelegramError: {e}")
        await update.effective_message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ (TelegramError): {e}", parse_mode="HTML")
    except Exception as e:
        logging.exception(f"refresh_balance: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        await update.effective_message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", parse_mode="HTML")

async def leaderboard(update: Update, context: CallbackContext):
    logging.info("leaderboard –≤—ã–∑–≤–∞–Ω–∞")
    try:
        leaderboard_data = get_leaderboard()
        message = "<b>üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤</b>\n\n"
        for i, entry in enumerate(leaderboard_data, start=1):
            user = get_user(entry['user_id'])
            username = user.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if user else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            comments = entry['comments']
            likes = entry['likes']
            level = calculate_user_level(comments, likes)
            message += f"{i}. @{username} - –£—Ä–æ–≤–µ–Ω—å: {level} - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {comments} - –õ–∞–π–∫–∏: {likes}\n"

        keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è–ù–∞–∑–∞–¥", callback_data="admin_panel")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if update.callback_query:
            await update.callback_query.message.edit_text(message, reply_markup=reply_markup, parse_mode="HTML")
            await update.callback_query.answer()
        else:
            await update.message.reply_text(message, reply_markup=reply_markup, parse_mode="HTML")

    except Exception as e:
        logging.exception(f"leaderboard: –û—à–∏–±–∫–∞: {e}")
        await update.effective_message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", parse_mode="HTML")

async def show_referrals(update: Update, context: CallbackContext):
    try:
        user_id = update.effective_user.id
        referrals = get_referrals(user_id)

        if referrals:
            message = "üìë –í–∞—à–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ:\n"
            for referral in referrals:
                username = referral.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                first_name = referral.get('first_name', '')
                last_name = referral.get('last_name', '')
                join_date = referral.get('join_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                join_date_str = join_date.strftime('%d.%m.%Y') if isinstance(join_date, datetime) else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                message += f"- {first_name} {last_name} (@{username}) - –î–∞—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {join_date_str}\n"
        else:
            message = "üòî üòî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤–∞—à –∫–∞–±–∏–Ω–µ—Ç(–ö–Ω–æ–ø–∫–∞ ‚Ü©Ô∏è–ù–∞–∑–∞–¥), —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à—É –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –¥—Ä—É–∑—å—è–º. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—Å—è –∫ –Ω–∞–º, –≤–∞–º –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –¥–µ–Ω—å–≥–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å –≤ —Ä–∞–∑–º–µ—Ä–µ 2000 ‚ÇΩ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ ü§ó\n"

        keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è–ù–∞–∑–∞–¥", callback_data="my_profile")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if update.callback_query:
            await update.callback_query.message.edit_text(message, reply_markup=reply_markup, parse_mode="HTML")
            await update.callback_query.answer()
        else:
            await update.message.reply_text(message, reply_markup=reply_markup, parse_mode="HTML")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def show_leaderboard(update: Update, context: CallbackContext):
    logging.info("show_leaderboard –≤—ã–∑–≤–∞–Ω–∞")
    try:
        page = context.user_data.get('leaderboard_page', 0)
        
        if update.callback_query.data == "leaderboard_next":
            page += 1
            context.user_data['leaderboard_page'] = page
        elif update.callback_query.data == "leaderboard_prev":
            page = max(0, page - 1)
            context.user_data['leaderboard_page'] = page

        leaderboard_data, total = get_leaderboard(page * 10, 10)
        total_pages = (total - 1) // 10 + 1

        message = f"<b>üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages})</b>\n\n"

        for i, entry in enumerate(leaderboard_data, start=1):
            user = get_user(entry['user_id'])
            username = user.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if user else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            comments = entry.get('comments', 0) or 0  # –ó–∞—â–∏—Ç–∞ –æ—Ç None
            level = calculate_user_level(comments)  # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            message += (
                f"üéØ –ú–µ—Å—Ç–æ #{page * 10 + i}\n"
                f"üë§ @{username}\n"
                f"üèÖ –£—Ä–æ–≤–µ–Ω—å: {level}\n"
                f"üí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {comments}\n"
                f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            )

        keyboard = []
        nav_buttons = []
        
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="leaderboard_prev"))
        if (page + 1) * 10 < total:
            nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data="leaderboard_next"))
        
        if nav_buttons:
            keyboard.append(nav_buttons)
        keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è–í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])

        reply_markup = InlineKeyboardMarkup(keyboard)

        if update.callback_query:
            await update.callback_query.message.edit_text(message, reply_markup=reply_markup, parse_mode="HTML")
            await update.callback_query.answer()
        else:
            await update.message.reply_text(message, reply_markup=reply_markup, parse_mode="HTML")

    except Exception as e:
        logging.exception(f"show_leaderboard: –û—à–∏–±–∫–∞: {e}")
        await update.effective_message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", parse_mode="HTML")

async def show_pending_coupons(update: Update, context: CallbackContext):
    logging.info("show_pending_coupons –≤—ã–∑–≤–∞–Ω–∞")
    try:
        page = context.user_data.get('pending_page', 0)
        
        if update.callback_query.data == "pending_next":
            page += 1
            context.user_data['pending_page'] = page
        elif update.callback_query.data == "pending_prev":
            page = max(0, page - 1)
            context.user_data['pending_page'] = page

        pending_coupons, total = get_pending_coupons_list(page * 10, 10)
        total_pages = (total - 1) // 10 + 1

        if not pending_coupons:
            message = "üéâ –ù–µ—Ç –∫—É–ø–æ–Ω–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è."
            keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è–í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.callback_query.message.edit_text(message, reply_markup=reply_markup)
            return

        for coupon in pending_coupons:
            date_str = coupon['date']
            formatted_date = date_str.strftime('%d.%m.%Y %H:%M') if date_str else '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'
            message = (
                f"<b>üéüÔ∏è –ö—É–ø–æ–Ω (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages})</b>\n\n"
                f"üìù –ù–æ–º–µ—Ä: {coupon['coupon_id']}\n"
                f"üí∞ –°—É–º–º–∞: {coupon['amount']}—Ä.\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{coupon.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"üìÖ –î–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞: {formatted_date}\n"
                f"üìå –°—Ç–∞—Ç—É—Å: {get_coupon_status_ru(coupon['status'])}\n"
            )

            keyboard = [
                [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_coupon_{coupon['coupon_id']}")],
                [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_coupon_{coupon['coupon_id']}")],
                [InlineKeyboardButton("üë§ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data=f"view_profile_{coupon['user_id']}")]
            ]
            
            nav_buttons = []
            if page > 0:
                nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="pending_prev"))
            if (page + 1) * 10 < total:
                nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data="pending_next"))
            
            if nav_buttons:
                keyboard.append(nav_buttons)
            keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è–í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.callback_query.message.edit_text(message, reply_markup=reply_markup, parse_mode="HTML")

        await update.callback_query.answer()

    except Exception as e:
        logging.exception(f"show_pending_coupons: –û—à–∏–±–∫–∞: {e}")
        await update.effective_message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

async def user_list(update: Update, context: CallbackContext):
    logging.info("user_list –≤—ã–∑–≤–∞–Ω–∞")
    try:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é —Å–ø–∏—Å–∫–∞
        context.user_data['viewing_users_list'] = False
        
        message = "–í–∞–º –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ @nick –≤ —á–∞—Ç –∏ —Ç–æ–≥–¥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ –¥–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."
        keyboard = [
            [InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –∑–∞ –º–µ—Å—è—Ü", callback_data="show_users_list_month")],
            [InlineKeyboardButton("–í–µ—Å—å —Å–ø–∏—Å–æ–∫", callback_data="show_users_list_all")],
            [InlineKeyboardButton("‚Ü©Ô∏è–ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.message.edit_text(message, reply_markup=reply_markup)
            await update.callback_query.answer()
        elif update.message:
            await update.message.reply_text(message, reply_markup=reply_markup)
            
    except Exception as e:
        logging.exception(f"user_list: –í–Ω–µ—à–Ω—è—è –æ—à–∏–±–∫–∞: {e}")
        await update.effective_message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", parse_mode="HTML")

async def show_users_list(update: Update, context: CallbackContext, month_only=False):
    logging.info(f"show_users_list –≤—ã–∑–≤–∞–Ω–∞ (month_only={month_only})")
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫
        context.user_data['viewing_users_list'] = True
        
        page = context.user_data.get('users_page', 0)
        
        if update.callback_query.data == "users_next":
            page += 1
            context.user_data['users_page'] = page
        elif update.callback_query.data == "users_prev":
            page = max(0, page - 1)
            context.user_data['users_page'] = page

        users, total = get_users_list(page * 10, 10, month_only)
        total_pages = (total - 1) // 10 + 1

        if not users:
            message = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç."
            keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è–ù–∞–∑–∞–¥", callback_data="user_list")]]
        else:
            message = f"üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}):\n\n"
            message += "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ @username\n\n"
            for user in users:
                if user is None:
                    continue
                username = user.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                first_name = user.get('first_name', '')
                last_name = user.get('last_name', '')
                full_name = f"{first_name} {last_name}".strip() or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                join_date = user.get('join_date')
                join_date_str = join_date.strftime('%d.%m.%Y') if isinstance(join_date, datetime) else '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'
                balance = user.get('balance', 0)
                message += (
                    f"üë§ @{username}\n"
                    f"üìù –§–ò–û: {full_name}\n"
                    f"üìÖ –î–∞—Ç–∞: {join_date_str}\n"
                    f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ\n"
                    f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                )

            keyboard = []
            nav_buttons = []
            
            if page > 0:
                nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="users_prev"))
            if (page + 1) * 10 < total:
                nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data="users_next"))
            
            if nav_buttons:
                keyboard.append(nav_buttons)
            keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è–í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.message.edit_text(
            message, 
            reply_markup=reply_markup, 
            parse_mode="HTML"
        )
        await update.callback_query.answer()

    except Exception as e:
        logging.exception(f"show_users_list: –û—à–∏–±–∫–∞: {e}")
        await update.effective_message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

async def view_profile_by_user(update: Update, context: CallbackContext, user):
    logging.info(f"view_profile_by_user –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('user_id')}")
    try:
        if not isinstance(user, dict):
            logging.error(f"view_profile_by_user: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user}")
            await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
            
        user_id = user.get('user_id')
        if not user_id:
            logging.error("view_profile_by_user: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç user_id")
            await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        full_name = f"{user.get('first_name', '')} {user.get('last_name', '')}".strip()
        invited_users, _ = get_invited_users_from_db(user_id)
        invited_users_list = []
        
        for invited_user in invited_users:
            invited_user_id = invited_user.get('user_id')
            if not invited_user_id:
                continue
                
            try:
                user_tg_invited = await context.bot.get_chat(invited_user_id)
                full_name_invited = f"{user_tg_invited.first_name or ''} {user_tg_invited.last_name or ''}".strip()
                username = invited_user.get('username', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
                join_date = invited_user.get('join_date')
                join_date_formatted = join_date.strftime("%d.%m.%Y") if join_date else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                invited_users_list.append(f"@{username} - {full_name_invited} - {join_date_formatted}")

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {invited_user_id}: {e}")
                invited_users_list.append(f"ID: {invited_user_id} - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

        invited_users_message = "\n".join(invited_users_list) if invited_users_list else "–ù–µ—Ç –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."

        # –ü–æ–ª—É—á–∞–µ–º –∫—É–ø–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_coupons = get_user_coupons(user_id)
        coupons_message = ""
        if user_coupons:
            coupons_message = "\n".join([
                f"–ö—É–ø–æ–Ω: {coupon['coupon_id']} - –°—É–º–º–∞: {coupon['amount']}—Ä. - –°—Ç–∞—Ç—É—Å: {get_coupon_status_ru(coupon['status'])}"
                for coupon in user_coupons
            ])
        else:
            coupons_message = "–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫—É–ø–æ–Ω–æ–≤."

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —É—Ä–æ–≤–µ–Ω—å
        activity = get_user_activity(user_id)
        level = calculate_user_level(activity['comments'])

        message = (
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{user.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
            f"‚≠ê –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {full_name}\n"
            f"üíµ –ë–∞–ª–∞–Ω—Å: {user.get('balance', 0)} ‚ÇΩ\n"
            f"üèÖ –£—Ä–æ–≤–µ–Ω—å: {level}\n\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.get('join_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö: {user.get('referrals', 0)}\n"
            f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {user.get('referral_link', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
            f"üìã –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{invited_users_message}\n\n"
            f"Ô∏èüéüÔ∏è –ö—É–ø–æ–Ω—ã:\n{coupons_message}"
        )

        await update.message.reply_text(message, parse_mode="HTML")

    except Exception as e:
        logging.exception(f"view_profile_by_user: –í–Ω–µ—à–Ω—è—è –æ—à–∏–±–∫–∞: {e}")
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}", parse_mode="HTML")

async def open_admin_panel(update: Update, context: CallbackContext):
    logging.info("open_admin_panel –≤—ã–∑–≤–∞–Ω–∞")
    try:
        admin_id = update.effective_user.id
        if admin_id not in ADMIN_IDS:
            await update.effective_message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–∞–Ω–µ–ª–∏.")
            return

        total_users = get_total_users()
        total_coupons = get_total_coupons()
        total_referrals = get_total_referrals()
        approved_coupons = get_approved_coupons()
        pending_coupons = get_pending_coupons()
        active_coupons = get_active_coupons()
        frozen_accounts = get_frozen_accounts_count()

        message = (
            f"üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {frozen_accounts}\n"
            f"üé´ –ö—É–ø–æ–Ω–æ–≤ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {total_coupons}\n"
            f"üéüÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫—É–ø–æ–Ω–æ–≤: {active_coupons}\n"
            f"üìà –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {total_referrals}\n\n"
            f"üü¢ –û–¥–æ–±—Ä–µ–Ω–æ –∫—É–ø–æ–Ω–æ–≤: {approved_coupons}\n"
            f"üî¥ –ñ–¥—É—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è: {pending_coupons}\n"
            f"\n\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
        )

        keyboard = [
            [InlineKeyboardButton("üîÑ–û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_panel")],
            [InlineKeyboardButton("üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", callback_data="leaderboard")],
            [InlineKeyboardButton("üë•–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="user_list")],
            [InlineKeyboardButton("üéüÔ∏è–í—Å–µ –∫—É–ø–æ–Ω—ã", callback_data="all_coupons")],
            [InlineKeyboardButton("üî¥ –ñ–¥—É—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è", callback_data="pending_coupons")],
            [InlineKeyboardButton("‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data="manage_freezes")],
            [InlineKeyboardButton("üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data="manage_announcements")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=reply_markup, parse_mode="HTML")

    except Exception as e:
        logging.exception(f"open_admin_panel: –í–Ω–µ—à–Ω—è—è –æ—à–∏–±–∫–∞: {e}")
        await update.effective_message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", parse_mode="HTML")

async def notify_balance_update(context: CallbackContext, user_id: int, amount: int, reason: str) -> bool:
    try:
        user = get_user(user_id)
        if not user:
            logging.error(f"notify_balance_update: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return False

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if amount < 0:
            operation_type = "–°–ø–∏—Å–∞–Ω–∏–µ: "
            amount_str = f"{amount}"  # –û—Å—Ç–∞–≤–ª—è–µ–º –º–∏–Ω—É—Å –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        else:
            operation_type = "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: +"
            amount_str = f"{amount}"

        message = (
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω.\n"
            f"{operation_type}{abs(amount)} ‚ÇΩ\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.get('balance', 0)} ‚ÇΩ"
        )

        await context.bot.send_message(chat_id=user_id, text=message, parse_mode="HTML")
        logging.info(f"notify_balance_update: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        return True
    except Exception as e:
        logging.exception(f"notify_balance_update: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        return False

def update_user_activity_and_rewards(user_id, comments=0, likes=0):
    try:
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('''
            INSERT INTO user_activity (user_id, comments, likes, last_activity, activity_count)
            VALUES (%s, %s, %s, %s, %s)
            ON DUPLICATE KEY UPDATE
                comments = comments + VALUES(comments),
                likes = likes + VALUES(likes),
                last_activity = VALUES(last_activity),
                activity_count = activity_count + 1
        ''', (user_id, comments, likes, datetime.now(), 1))
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT comments FROM user_activity WHERE user_id = %s", (user_id,))
        activity = cursor.fetchone()
        
        # –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
        if activity:
            level, rewards = calculate_user_level_and_rewards(activity['comments'])
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("UPDATE users SET balance = balance + %s WHERE user_id = %s", (rewards, user_id))
            add_transaction(user_id, rewards, f"–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è {level}")
            conn.commit()
        
        conn.close()
    except mysql.connector.Error as e:
        logging.error(f"Error updating user activity and rewards for user {user_id}: {e}")

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
async def show_transaction_history(update: Update, context: CallbackContext):
    if await check_frozen_status(update, context):
        return
    logging.info("show_transaction_history –≤—ã–∑–≤–∞–Ω–∞")
    try:
        user_id = update.callback_query.from_user.id
        page = context.user_data.get('transaction_page', 0)
        
        if update.callback_query.data == "trans_next":
            page += 1
            context.user_data['transaction_page'] = page
        elif update.callback_query.data == "trans_prev":
            page = max(0, page - 1)
            context.user_data['transaction_page'] = page
        
        transactions, total = get_user_transactions(user_id, page * 5, 5)
        total_pages = (total - 1) // 5 + 1
        
        if not transactions:
            message = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π."
            keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è–ù–∞–∑–∞–¥", callback_data="my_profile")]]
        else:
            message = f"üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}):\n\n"
            for trans in transactions:
                date = trans['date'].strftime('%d.%m.%Y %H:%M')
                if trans['amount'] > 0:
                    amount = f"+ {trans['amount']}"
                else:
                    amount = f"- {abs(trans['amount'])}"
                
                message += f"üìÖ {date}\nüí∞ {amount}‚ÇΩ\nüìù {trans['reason']}\n"
                message += "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            keyboard = []
            nav_buttons = []
            
            if page > 0:
                nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="trans_prev"))
            if (page + 1) * 5 < total:
                nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data="trans_next"))
            
            if nav_buttons:
                keyboard.append(nav_buttons)
            keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è–í –ø—Ä–æ—Ñ–∏–ª—å", callback_data="my_profile")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        photo_path = "/var/www/admin78/data/www/vdohnovenie.pro/bot/photo/Unt8.jpg"
        
        from telegram import InputMediaPhoto
        media = InputMediaPhoto(
            media=open(photo_path, 'rb'),
            caption=message,
            parse_mode="HTML"
        )
        
        await update.callback_query.message.edit_media(
            media=media,
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logging.error(f"Error in show_transaction_history: {e}")
        await update.callback_query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")

async def handle_group_message(update: Update, context: CallbackContext):
    try:
        message = update.message
        chat = message.chat
        user_id = message.from_user.id
        username = message.from_user.username
        first_name = message.from_user.first_name
        last_name = message.from_user.last_name
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logging.info(f"""
        –ü–æ–ª—É—á–µ–Ω–æ –≥—Ä—É–ø–ø–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
        chat_id: {chat.id}
        chat_type: {chat.type}
        ALLOWED_DISCUSSION_ID: {ALLOWED_DISCUSSION_ID}
        user_id: {user_id}
        username: {username}
        text: {message.text[:50] if message.text else 'No text'}
        """)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø—ã (—Ç–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ —á–∞—Ç–∞)
        if chat.id not in [ALLOWED_DISCUSSION_ID, TEST_DISCUSSION_ID]:
            logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã {chat.id}")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        registered_user = get_user(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–º–æ—Ä–æ–∑–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if registered_user and is_account_frozen(user_id):
            logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
            return
            
        if registered_user:
            logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await process_registered_user_message(update, context, registered_user)
        else:
            logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await process_unregistered_user_message(update, context, user_id, username, first_name, last_name)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_group_message: {e}\n{traceback.format_exc()}")

async def process_unregistered_user_message(update, context, user_id, username, first_name, last_name):
    try:
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)
        now = datetime.now()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        cursor.execute("SELECT * FROM temp_activity WHERE user_id = %s", (user_id,))
        current_activity = cursor.fetchone()
        old_comments = current_activity['comments'] if current_activity else 0
        logging.info(f"–°—Ç–∞—Ä–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {old_comments}")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π —É—Ä–æ–≤–µ–Ω—å
        old_level, _, _ = calculate_user_level(old_comments)
        logging.info(f"–°—Ç–∞—Ä—ã–π —É—Ä–æ–≤–µ–Ω—å: {old_level}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
        if current_activity:
            cursor.execute("""
                UPDATE temp_activity 
                SET comments = comments + 1,
                    last_activity = %s
                WHERE user_id = %s
            """, (now, user_id))
        else:
            cursor.execute("""
                INSERT INTO temp_activity 
                (user_id, username, first_name, last_name, comments, first_activity, last_activity)
                VALUES (%s, %s, %s, %s, 1, %s, %s)
            """, (user_id, username, first_name, last_name, now, now))

        conn.commit()

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        cursor.execute("SELECT comments FROM temp_activity WHERE user_id = %s", (user_id,))
        new_activity = cursor.fetchone()
        new_comments = new_activity['comments']
        logging.info(f"–ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {new_comments}")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
        new_level, _, _ = calculate_user_level(new_comments)
        logging.info(f"–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: {new_level}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
        if new_level > old_level:
            reward = calculate_level_reward(new_level)
            logging.info(f"–ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è! new_level={new_level}, reward={reward}")
            await notify_temp_level_up(context, update, user_id, new_level, reward)
        else:
            logging.info("–£—Ä–æ–≤–µ–Ω—å –Ω–µ –ø–æ–≤—ã—Å–∏–ª—Å—è")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        if conn:
            conn.rollback()
    finally:
        if cursor:
            cursor.close()
        if conn:
            conn.close()

async def notify_temp_level_up(context, update, user_id, new_level, reward):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        username = update.message.from_user.username
        first_name = update.message.from_user.first_name
        display_name = f"@{username}" if username else first_name
        
        next_level_reward = calculate_level_reward(new_level + 1) if new_level < 11 else 1000
        
        message = (
            f"{display_name}, "
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω –¥–æ {new_level}-–≥–æ!\n\n"
            f"üí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {reward}‚ÇΩ –Ω–∞ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å.\n\n"
            f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ ‚ú®–í—Å–µ–ª–µ–Ω–Ω–∞—è–ü–æ–º–æ—â–∏‚ú® –∏ –æ–Ω–∏ –æ—Ç–æ–±—Ä–∞–∑—è—Ç—Å—è —É –≤–∞—Å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ. –î–µ–Ω—å–≥–∏ –≤—ã –º–æ–∂–µ—Ç–µ —Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ —É—Å–ª—É–≥–∏\n"
            f"‚ùó–î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ 'üì±–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–±–∏–Ω–µ—Ç' –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n"
            f"–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–Ω–µ—Å–µ—Ç –≤–∞–º {next_level_reward}‚ÇΩ!\n\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –≥—Ä—É–ø–ø–µ, —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏üí≠ –∏ –ª–∞–π–∫–∏‚ù§Ô∏è"
        )
        
        keyboard = [[InlineKeyboardButton("üì±–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–±–∏–Ω–µ—Ç", url="https://t.me/vdohnoveniepro_bot")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –±–æ—Ç–∞

        photo_path = "/var/www/admin78/data/www/vdohnovenie.pro/bot/photo/Unt2.jpg"

        await context.bot.send_photo(
            chat_id=update.message.chat_id,  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–æ—Ç –∂–µ —á–∞—Ç, –≥–¥–µ –±—ã–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            photo=open(photo_path, 'rb'),
            caption=message,
            reply_markup=reply_markup,
            parse_mode="HTML",
            reply_to_message_id=update.message.message_id  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        )
        
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è: user_id={user_id}, new_level={new_level}")
        
    except Exception as e:
        logging.error(f"Error in notify_temp_level_up: {e}")

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
async def check_and_notify_subscription(update: Update, context: CallbackContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω"""
    user_id = update.effective_user.id
    is_subscribed = await check_subscription(context, user_id)
    
    if not is_subscribed:
        message = (
            "‚ùó –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º "
            "–Ω–∞ –Ω–∞—à—É –≥—Ä—É–ø–ø—É @vdohnovenie_pro\n\n"
            "1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ @vdohnovenie_pro\n"
            "2Ô∏è‚É£ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≥—Ä—É–ø–ø—É\n"
            "3Ô∏è‚É£ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'"
        )

        keyboard = [
            [InlineKeyboardButton("üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É", url="https://t.me/vdohnovenie_pro")],
            [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="refresh_profile")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        photo_path = "/var/www/admin78/data/www/vdohnovenie.pro/bot/photo/Unt2.jpg"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ —ç—Ç–æ callback query
        if update.callback_query:
            await update.callback_query.answer(
                "–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–∞—à—É –≥—Ä—É–ø–ø—É @vdohnovenie_pro\n"
                "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                show_alert=True
            )

        try:
            media = InputMediaPhoto(
                media=open(photo_path, 'rb'),
                caption=message,
                parse_mode="HTML"
            )
            
            # –ï—Å–ª–∏ —ç—Ç–æ callback query —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            if update.callback_query and update.callback_query.message:
                await update.callback_query.message.edit_media(
                    media=media,
                    reply_markup=reply_markup
                )
            # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            else:
                await context.bot.send_photo(
                    chat_id=update.effective_chat.id,
                    photo=open(photo_path, 'rb'),
                    caption=message,
                    reply_markup=reply_markup,
                    parse_mode="HTML"
                )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ: {e}")
            if update.callback_query:
                await update.callback_query.answer(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≥—Ä—É–ø–ø—É @vdohnovenie_pro",
                    show_alert=True
                )
            else:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–∞—à—É –≥—Ä—É–ø–ø—É @vdohnovenie_pro\n"
                         "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
                )
        return False
    return True

async def admin_panel(update: Update, context: CallbackContext):
    # –ü—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
    context.user_data['in_freeze_menu'] = False
    logging.info("admin_panel –≤—ã–∑–≤–∞–Ω–∞")
    try:
        admin_id = update.effective_user.id
        if admin_id not in ADMIN_IDS:
            await update.effective_message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–∞–Ω–µ–ª–∏.")
            return

        total_users = get_total_users()
        total_coupons = get_total_coupons()
        total_referrals = get_total_referrals()
        approved_coupons = get_approved_coupons()
        pending_coupons = get_pending_coupons()
        active_coupons = get_active_coupons()
        frozen_accounts = get_frozen_accounts_count()

        # *** –í–æ—Ç –∑–¥–µ—Å—å —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ ***
        message = (
            f"üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {frozen_accounts}\n"
            f"üé´ –ö—É–ø–æ–Ω–æ–≤ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {total_coupons}\n"
            f"üéüÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫—É–ø–æ–Ω–æ–≤: {active_coupons}\n"
            f"üìà –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {total_referrals}\n\n"
            f"üü¢ –û–¥–æ–±—Ä–µ–Ω–æ –∫—É–ø–æ–Ω–æ–≤: {approved_coupons}\n"
            f"üî¥ –ñ–¥—É—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è: {pending_coupons}\n"
            f"\n\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"  # –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
        )
        # *** –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ***

        keyboard = [
            [InlineKeyboardButton("üîÑ–û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_panel")],
            [InlineKeyboardButton("üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", callback_data="leaderboard")],
            [InlineKeyboardButton("üë•–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="user_list")],
            [InlineKeyboardButton("üéüÔ∏è–í—Å–µ –∫—É–ø–æ–Ω—ã", callback_data="all_coupons")],
            [InlineKeyboardButton("üî¥ –ñ–¥—É—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è", callback_data="pending_coupons")],
            [InlineKeyboardButton("‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data="manage_freezes")],
            [InlineKeyboardButton("üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data="manage_announcements")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # *** –í–ê–ñ–ù–û: –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –ü–ï–†–ï–î –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è ***
        print(f"update.callback_query: {update.callback_query}")
        print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞: {reply_markup}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback-–∑–∞–ø—Ä–æ—Å (–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏)
        if update.callback_query and update.callback_query.message:
            try:
                await update.callback_query.message.delete()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                sent_message = await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=reply_markup, parse_mode="HTML") # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await update.callback_query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback-–∑–∞–ø—Ä–æ—Å–∞
                context.chat_data['admin_panel_message_id'] = sent_message.message_id # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            except telegram.error.BadRequest as e:
                logging.error(f"BadRequest –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await update.callback_query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", show_alert=True)
            except telegram.error.TelegramError as e:
                logging.error(f"TelegramError –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await update.callback_query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", show_alert=True)
            except Exception as e:
                logging.exception(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await update.callback_query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", show_alert=True)
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã /admin_panel
        elif update.effective_message:
            sent_message = await update.effective_message.reply_text(message, reply_markup=reply_markup, parse_mode="HTML")
            context.chat_data['admin_panel_message_id'] = sent_message.message_id
        else:
            logging.warning("–ù–∏ update.callback_query.message, –Ω–∏ update.effective_message –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã")
            await context.bot.send_message(chat_id=update.effective_chat.id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


    except Exception as e:
        logging.exception(f"admin_panel: –í–Ω–µ—à–Ω—è—è –æ—à–∏–±–∫–∞: {e}")
        await update.effective_message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", parse_mode="HTML")

async def check_frozen_status(update: Update, context: CallbackContext) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ—Ä–æ–∑–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω"""
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ effective_user
    if not update.effective_user:
        return False
        
    user_id = update.effective_user.id
    if is_account_frozen(user_id):
        message = (
            "‚ùÑÔ∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω.\n\n"
            "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç - @vdohnovenie_pro_chat"
        )
        if update.callback_query:
            await update.callback_query.answer(message, show_alert=True)
        else:
            await update.message.reply_text(message)
        return True
    return False

async def manage_freezes(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–æ—Ä–æ–∑–∫–æ–π –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –º–µ–Ω—é –∑–∞–º–æ—Ä–æ–∑–∫–∏
    context.user_data['in_freeze_menu'] = True
    
    message = (
        "‚ùÑÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–æ—Ä–æ–∑–∫–æ–π –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n\n"
        "–î–ª—è –∑–∞–º–æ—Ä–æ–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "/freeze @username\n\n"
        "–î–ª—è —Ä–∞–∑–º–æ—Ä–æ–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:\n"
        "/unfreeze @username"
    )
    keyboard = [
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö", callback_data="show_frozen_list")],
        [InlineKeyboardButton("‚Ü©Ô∏è–ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.edit_text(message, reply_markup=reply_markup)

async def manage_announcements(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏"""
    announcements = get_active_announcements()
    message = "üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏\n\n"
    
    if announcements:
        message += "–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n\n"
        for ann in announcements:
            message += f"- {ann['message']}\n"
    else:
        message += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n\n"
    
    message += "\n–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/announce <—Ç–µ–∫—Å—Ç>"

    keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è–ù–∞–∑–∞–¥", callback_data="admin_panel")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.edit_text(message, reply_markup=reply_markup)

async def freeze_command(update: Update, context: CallbackContext):
    """Command to freeze a user account"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        if update.effective_user.id not in ADMIN_IDS:
            await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –º–µ–Ω—é –∑–∞–º–æ—Ä–æ–∑–∫–∏
        if not context.user_data.get('in_freeze_menu', False):
            await update.message.reply_text(
                "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –º–µ–Ω—é '–ó–∞–º–æ—Ä–æ–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤'\n"
                "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–º–æ—Ä–æ–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤'"
            )
            return

        # Get username from command
        args = context.args
        if not args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /freeze @username")
            return

        username = args[0].replace("@", "")
        user = get_user_by_username(username)
        
        if not user:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        if freeze_user_account(user['user_id']):
            await update.message.reply_text(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç @{username} –∑–∞–º–æ—Ä–æ–∂–µ–Ω.")
            # Notify user
            try:
                await context.bot.send_message(
                    chat_id=user['user_id'],
                    text="‚ùÑÔ∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –∑–∞–º–æ—Ä–æ–∂–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.\n –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç - @vdohnovenie_pro_chat"
                )
            except Exception as e:
                logging.error(f"Error notifying user about account freeze: {e}")
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–æ—Ä–æ–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ @{username}.")

    except Exception as e:
        logging.error(f"Error in freeze_command: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")

async def unfreeze_command(update: Update, context: CallbackContext):
    """Command to unfreeze a user account"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        if update.effective_user.id not in ADMIN_IDS:
            await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –º–µ–Ω—é –∑–∞–º–æ—Ä–æ–∑–∫–∏
        if not context.user_data.get('in_freeze_menu', False):
            await update.message.reply_text(
                "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –º–µ–Ω—é '–ó–∞–º–æ—Ä–æ–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤'\n"
                "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–º–æ—Ä–æ–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤'"
            )
            return

        # Get username from command
        args = context.args
        if not args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /unfreeze @username")
            return

        username = args[0].replace("@", "")
        user = get_user_by_username(username)

        if not user:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        if unfreeze_user_account(user['user_id']):
            # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            admin_message = (
                f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç —Ä–∞–∑–º–æ—Ä–æ–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
                f"üÜî ID: {user['user_id']}\n"
                f"üìù –ò–º—è: {user.get('first_name', '')} {user.get('last_name', '')}\n"
                f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )
            await update.message.reply_text(admin_message)

            # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            keyboard = [[InlineKeyboardButton("üì± –û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞", callback_data="my_profile")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            try:
                await context.bot.send_message(
                    chat_id=user['user_id'],
                    text="‚ú® –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                        "–¢–µ–ø–µ—Ä—å –≤—ã —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.",
                    reply_markup=reply_markup
                )
            except Exception as e:
                logging.error(f"Error notifying user about account unfreeze: {e}")
                await update.message.reply_text(
                    f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç —Ä–∞–∑–º–æ—Ä–æ–∂–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}"
                )
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ—Ä–æ–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ @{username}.")

    except Exception as e:
        logging.error(f"Error in unfreeze_command: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")

async def show_frozen_accounts(update: Update, context: CallbackContext):
    try:
        page = context.user_data.get('frozen_page', 0)
        
        if update.callback_query.data == "frozen_next":
            page += 1
            context.user_data['frozen_page'] = page
        elif update.callback_query.data == "frozen_prev":
            page = max(0, page - 1)
            context.user_data['frozen_page'] = page
            
        frozen_users, total = get_frozen_accounts(page * 10, 10)
        total_pages = (total - 1) // 10 + 1

        if not frozen_users:
            message = "–ù–µ—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤."
            keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è–ù–∞–∑–∞–¥", callback_data="manage_freezes")]]
        else:
            message = f"‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}):\n\n"
            for user in frozen_users:
                join_date = user['join_date'].strftime('%d.%m.%Y') if user['join_date'] else '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'
                message += (
                    f"üë§ @{user['username']}\n"
                    f"üìù –§–ò–û: {user['first_name']} {user['last_name']}\n"
                    f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {join_date}\n"
                    f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                )

            keyboard = []
            nav_buttons = []
            if page > 0:
                nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="frozen_prev"))
            if (page + 1) * 10 < total:
                nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data="frozen_next"))
            
            if nav_buttons:
                keyboard.append(nav_buttons)
            keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è–í –º–µ–Ω—é –∑–∞–º–æ—Ä–æ–∑–∫–∏", callback_data="manage_freezes")])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.message.edit_text(message, reply_markup=reply_markup, parse_mode="HTML")
        
    except Exception as e:
        logging.error(f"Error in show_frozen_accounts: {e}")
        await update.callback_query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")

async def announce_command(update: Update, context: CallbackContext):
    """Command to create a global announcement"""
    try:
        # Check admin permissions
        if update.effective_user.id not in ADMIN_IDS:
            await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        # Get announcement text
        announcement_text = " ".join(context.args)
        if not announcement_text:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è: /announce <—Ç–µ–∫—Å—Ç>")
            return

        if create_announcement(announcement_text):
            await update.message.reply_text("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ.")

            # Send to all users
            conn = get_db_connection()
            cursor = conn.cursor(dictionary=True)
            cursor.execute("SELECT user_id FROM users")
            users = cursor.fetchall()
            conn.close()

            for user in users:
                try:
                    await context.bot.send_message(
                        chat_id=user['user_id'],
                        text=f"üì¢ <b>–í–∞–∂–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:</b>\n\n{announcement_text}",
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logging.error(f"Error sending announcement to user {user['user_id']}: {e}")
                    continue

        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.")

    except Exception as e:
        logging.error(f"Error in announce_command: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")

async def show_tests_and_calculations(update: Update, context: CallbackContext):
    if await check_frozen_status(update, context):
        return
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª —Å —Ç–µ—Å—Ç–∞–º–∏ –∏ —Ä–∞—Å—á–µ—Ç–∞–º–∏"""
    try:
        message = (
            "üåü <b>–¢–µ—Å—Ç—ã –∏ —Ä–∞—Å—á–µ—Ç—ã</b>\n\n"
            "–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —Å–æ–±—Ä–∞–Ω—ã —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏ —Ä–∞—Å—á–µ—Ç—ã, "
            "–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º –≤ –ø–æ–∑–Ω–∞–Ω–∏–∏ —Å–µ–±—è –∏ –º–∏—Ä–∞:\n\n"
            "üßò –ë–∏–æ—Ä–∏—Ç–º—ã - —Ä–∞—Å—á–µ—Ç –≤–∞—à–∏—Ö –±–∏–æ—Ä–∏—Ç–º–æ–≤(—Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ, –∏–Ω–µ—Ç–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∏ –¥—Ä—É–≥–∏—Ö) –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è.\n\n"
            "‚ù§Ô∏è –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏\n\n"
        )

        keyboard = [
            [InlineKeyboardButton("üßò –ë–∏–æ—Ä–∏—Ç–º—ã", callback_data="biorhythm")],
            [InlineKeyboardButton("‚ù§Ô∏è –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", callback_data="compatibility")],
            [InlineKeyboardButton("‚Ü©Ô∏è üì±–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="my_profile")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        photo_path = "/var/www/admin78/data/www/vdohnovenie.pro/bot/photo/Unt11.jpg"

        if update.callback_query:
            media = InputMediaPhoto(
                media=open(photo_path, 'rb'),
                caption=message,
                parse_mode="HTML"
            )
            await update.callback_query.message.edit_media(
                media=media,
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_photo(
                photo=open(photo_path, 'rb'),
                caption=message,
                reply_markup=reply_markup,
                parse_mode="HTML"
            )

    except Exception as e:
        logging.error(f"Error in show_tests_and_calculations: {e}")
        await update.effective_message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ä–∞–∑–¥–µ–ª–∞ —Ç–µ—Å—Ç–æ–≤")

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /stat
async def show_my_stats(update: Update, context: CallbackContext, user_data=None, is_admin_view=False):
    if await check_frozen_status(update, context):
        return
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if user_data:
            user = user_data
            title = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}:</b>\n\n"
        else:
            user_id = update.effective_user.id
            user = get_user(user_id)
            title = "üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
        
        if not user:
            await update.message.reply_text("‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transactions, _ = get_user_transactions(user['user_id'], 0, 1000)
        referral_earnings = sum(t['amount'] for t in transactions if "–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ" in t['reason'].lower())
        activity_earnings = sum(t['amount'] for t in transactions if "–Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ" in t['reason'].lower())
        total_earned = sum(t['amount'] for t in transactions if t['amount'] > 0)
        total_spent = abs(sum(t['amount'] for t in transactions if t['amount'] < 0))

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —É—Ä–æ–≤–µ–Ω—å
        activity = get_user_activity(user['user_id'])
        level_data = calculate_user_level(activity['comments'])
        level = level_data[0]  # –£—Ä–æ–≤–µ–Ω—å
        progress = level_data[1]  # –ü—Ä–æ–≥—Ä–µ—Å—Å

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —É—Ä–æ–≤–Ω–µ–º –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        level_info = format_level_info(level, progress)

        referrals = get_referrals(user['user_id'])
        coupons = get_user_coupons(user['user_id'])
        active_coupons = len([c for c in coupons if c['status'] == 'approved'])
        pending_coupons = len([c for c in coupons if c['status'] == 'pending'])

        message = (
            f"{title}"
            f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.get('balance', 0)} ‚ÇΩ\n"
            f"üíµ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_earned} ‚ÇΩ\n"
            f"üí∏ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {total_spent} ‚ÇΩ\n\n"
            f"üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:\n"
            f"‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(referrals)}\n"
            f"‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referral_earnings} ‚ÇΩ\n\n"
            f"üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:\n"
            f"{format_level_info(level, progress)}"
            f"üí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {activity['comments']}\n"
            f"‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {activity_earnings} ‚ÇΩ\n"
            f"‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.get('join_date').strftime('%d.%m.%Y')}\n\n"
            f"üé´ –ö—É–ø–æ–Ω—ã:\n"
            f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ: {active_coupons}\n"
            f"üî¥ –û–∂–∏–¥–∞—é—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è: {pending_coupons}\n"
        )

        keyboard = [[InlineKeyboardButton("üì± –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="my_profile")]]
        if is_admin_view:
            keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        photo_path = "/var/www/admin78/data/www/vdohnovenie.pro/bot/photo/Unt10.jpg"

        if update.callback_query:
            media = InputMediaPhoto(
                media=open(photo_path, 'rb'),
                caption=message,
                parse_mode="HTML"
            )
            await update.callback_query.message.edit_media(
                media=media,
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_photo(
                photo=open(photo_path, 'rb'),
                caption=message,
                reply_markup=reply_markup,
                parse_mode="HTML"
            )

    except Exception as e:
        logging.exception(f"show_my_stats: –û—à–∏–±–∫–∞: {e}")
        await update.effective_message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

async def show_compact_stats(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ"""
    try:
        user_id = update.effective_user.id
        activity = get_user_activity(user_id)
        level, progress, extra_cycles = calculate_user_level(activity['comments'])
        
        next_level_reward = calculate_level_reward(level + 1) if level < 11 else 1000
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"üèÖ –£—Ä–æ–≤–µ–Ω—å: {level}\n"
            f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%\n"
            f"üí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {activity['comments']}\n"
            f"üí∞ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {next_level_reward}‚ÇΩ\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –±–æ—Ç–∞
        keyboard = [[InlineKeyboardButton("üì±–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–±–∏–Ω–µ—Ç", url="https://t.me/vdohnoveniepro_bot")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        photo_path = "/var/www/admin78/data/www/vdohnovenie.pro/bot/photo/Unt2.jpg"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await update.message.reply_photo(
            photo=open(photo_path, 'rb'),
            caption=message,
            reply_markup=reply_markup,
            parse_mode="HTML",
            reply_to_message_id=update.message.message_id
        )
            
    except Exception as e:
        logging.error(f"Error in show_compact_stats: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def handle_stat_command(update: Update, context: CallbackContext):
    logging.info(f"handle_stat_command –≤—ã–∑–≤–∞–Ω–∞ —Å —Ç–µ–∫—Å—Ç–æ–º: {update.message.text}")
    try:
        if not update.message:
            return
            
        text = update.message.text.strip()
        
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã /stat –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if text == '/stat':
            logging.info("–í—ã–∑–æ–≤ /stat –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            await show_compact_stats(update, context)
            return
            
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ /stat –∫–æ–º–∞–Ω–¥–∞ –∏ –º—ã –Ω–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, 
        # –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not text.startswith('/stat') and not context.user_data.get('viewing_users_list'):
            return
            
        # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if text.startswith('/stat@') or text.startswith('@'):
            username = text.split('@')[1].strip()
        elif text.startswith('/stat @'):
            username = text.split('@')[1].strip()
        else:
            return
            
        if text.startswith('/stat') and update.effective_user.id not in ADMIN_IDS:
            await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return
            
        user = get_user_by_username(username)
        if user:
            if text.startswith('/stat'):
                await show_my_stats(update, context, user_data=user, is_admin_view=True)
            else:
                await view_profile_by_user(update, context, user)
        else:
            await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                
    except Exception as e:
        logging.exception(f"handle_stat_command: –û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")

async def notify_level_up(context, update, user_id, new_level, reward):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è"""
    try:
        user = get_user(user_id)
        activity = get_user_activity(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        _, progress, _ = calculate_user_level(activity['comments'])
        
        level_message = ""
        if new_level == 11:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
            level_message = (
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è!\n\n"
                f"üí´ –¢–µ–ø–µ—Ä—å –∑–∞ –∫–∞–∂–¥—ã–µ 545 –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤—ã –±—É–¥–µ—Ç–µ "
                f"–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—Ç—å –ø–æ 1000‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å!\n\n"
                f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—â–∞—Ç—å—Å—è –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å!"
            )
        else:
            next_level_comments = get_level_requirements()[new_level + 1]
            current_comments = activity['comments']
            needed_comments = next_level_comments - current_comments
            level_message = f"–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å {needed_comments} —Å–æ–æ–±—â–µ–Ω–∏–π!"

        message = (
            f"@{user.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}, "
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω –¥–æ {new_level}-–≥–æ!\n"
            f"üí∞ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {reward}‚ÇΩ\n\n"
            f"{level_message}\n\n"
            f"üìà –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"{format_level_info(new_level, progress)}\n"
            f"üí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {activity['comments']}\n"
        )
        
        keyboard = [[InlineKeyboardButton("üì±–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–±–∏–Ω–µ—Ç", url="https://t.me/vdohnoveniepro_bot")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        photo_path = "/var/www/admin78/data/www/vdohnovenie.pro/bot/photo/Unt2.jpg"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç –≥—Ä—É–ø–ø—ã
        await context.bot.send_photo(
            chat_id=update.message.chat_id,  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–æ—Ç –∂–µ —á–∞—Ç, –≥–¥–µ –±—ã–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            photo=open(photo_path, 'rb'),
            caption=message,
            reply_markup=reply_markup,
            parse_mode="HTML",
            reply_to_message_id=update.message.message_id  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        )

    except Exception as e:
        logging.error(f"Error in notify_level_up: {e}")
        logging.error(traceback.format_exc())

async def handle_chat_message(update: Update, context: CallbackContext):
    try:
        user_id = update.message.from_user.id
        user = get_user(user_id)
        if not user:
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å  
        old_activity = get_user_activity(user_id)
        old_level = calculate_user_level(old_activity['comments'])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        update_user_activity(user_id, comments=1)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
        new_activity = get_user_activity(user_id)
        new_level = calculate_user_level(new_activity['comments'])
        
        # –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—Å–∏–ª—Å—è
        if new_level > old_level:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
            reward = calculate_level_reward(new_level)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user['balance'] = user.get('balance', 0) + reward
            save_user(user)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            add_transaction(user_id, reward, f"–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ {new_level} —É—Ä–æ–≤–Ω—è")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await notify_level_up(context, update, user_id, new_level, reward)
            
    except Exception as e:
        logging.error(f"Error in handle_chat_message: {e}")

async def handle_channel_post(update: Update, context: CallbackContext):
    """Handles posts from the channel and sends automated responses"""
    try:
        message = update.channel_post
        if not message:
            logging.info("–ù–µ—Ç channel_post –≤ update")
            return

        chat_id = message.chat_id
        message_id = message.message_id
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏–π
        discussion_chat_id = None
        if chat_id == ALLOWED_GROUP_ID:
            discussion_chat_id = ALLOWED_DISCUSSION_ID
        elif chat_id == TEST_CHANNEL_ID:
            discussion_chat_id = TEST_DISCUSSION_ID
        
        if not discussion_chat_id:
            logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª: {chat_id}")
            return

        # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–≤–∞—Ä–¥–∞
        await asyncio.sleep(5)

        # –ù–∞—Ö–æ–¥–∏–º ID —Ñ–æ—Ä–≤–∞—Ä–¥–∞ –≤ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π
        messages = await context.bot.get_updates()
        forwarded_message_id = None
        
        for update in messages:
            if (update.message and 
                update.message.chat.id == discussion_chat_id and
                update.message.is_automatic_forward and
                update.message.forward_from_chat and
                update.message.forward_from_chat.id == chat_id and
                update.message.forward_from_message_id == message_id):
                forwarded_message_id = update.message.message_id
                break

        if not forwarded_message_id:
            logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID —Ñ–æ—Ä–≤–∞—Ä–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return

        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            comment_text = (
                "üìå –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –≥—Ä—É–ø–ø–µ (‚ù§Ô∏è–ª–∞–π–∫–∏ –∏ üí¨–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏) "
                "—É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ ‚ú®–í—Å–µ–ª–µ–Ω–Ω–∞—è–ü–æ–º–æ—â–∏‚ú®.\n"
                "üí∞ –í–∞—Å –∂–¥—É—Ç:\n"
                "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
                "‚Ä¢ –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥\n"
                "‚Ä¢ 11 —É—Ä–æ–≤–Ω–µ–π —Å –ø—Ä–∏–∑–∞–º–∏ –¥–æ 5000‚ÇΩ –∏ –±–æ–ª—å—à–µ\n"
                "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ - 2000‚ÇΩ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ + 2000‚ÇΩ –¥—Ä—É–≥—É\n\n"
                "üéÅ –ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –º–æ–∂–Ω–æ —Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ —É—Å–ª—É–≥–∏ —Å –Ω–∞—à–µ–≥–æ —Å–∞–π—Ç–∞\n\n"
                "üì≤ –ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚ú®–í—Å–µ–ª–µ–Ω–Ω–∞—è–ü–æ–º–æ—â–∏‚ú®"
            )

            keyboard = [
                [InlineKeyboardButton("‚ú®–í—Å–µ–ª–µ–Ω–Ω–∞—è–ü–æ–º–æ—â–∏‚ú®", url="https://t.me/vdohnoveniepro_bot")],
                [InlineKeyboardButton("üõç –ù–∞—à –°–∞–π—Ç", url="https://t.me/vdohnoveniepro_bot/shop")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–æ—Ä–≤–∞—Ä–¥
            sent_message = await context.bot.send_photo(
                chat_id=discussion_chat_id,
                photo=open("/var/www/admin78/data/www/vdohnovenie.pro/bot/photo/Unt2.jpg", 'rb'),
                caption=comment_text,
                reply_markup=reply_markup,
                parse_mode="HTML",
                reply_to_message_id=forwarded_message_id  # –î–æ–±–∞–≤–ª—è–µ–º reply_to_message_id
            )
            
            logging.info(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {discussion_chat_id} –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {forwarded_message_id}")
            return True

        except telegram.error.TimedOut:
            logging.error("Timeout –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...")
            await asyncio.sleep(2)
            return False
            
        except telegram.error.RetryAfter as e:
            logging.error(f"Need to wait {e.retry_after} seconds before retry")
            await asyncio.sleep(e.retry_after)
            return False

        except telegram.error.TelegramError as e:
            logging.error(f"Telegram error: {e}")
            return False

    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –≤ handle_channel_post: {e}")
        return False


def main():
    conn = None
    try:
        conn = get_db_connection()
        logging.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM users")
        result = cursor.fetchone()
        if result:
            logging.info(f"–¢–∞–±–ª–∏—Ü–∞ users –¥–æ—Å—Ç—É–ø–Ω–∞. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {result[0]}")
        else:
            logging.warning("–¢–∞–±–ª–∏—Ü–∞ users –ø—É—Å—Ç–∞ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")

    except mysql.connector.Error as e:
        logging.critical(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î: {e}")
        return  # –í–∞–∂–Ω–æ –≤—ã–π—Ç–∏ –∏–∑ main(), –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –ë–î
    except Exception as e:
        logging.critical(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return
    finally:
        if conn:
            conn.close()
            logging.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")

    logging.info("–ù–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ main()")  # –¢–µ–ø–µ—Ä—å —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ü–†–ê–í–ò–õ–¨–ù–û–ú –º–µ—Å—Ç–µ

    logging.info("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    application = Application.builder().token("7365896423:AAF9RJwe0SOD-Guh68ei7k_ccGYWusyHIs4").build()
    logging.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ.")

    logging.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ job_queue...")
    job_queue = application.job_queue
    job_queue.run_daily(cleanup_coupons, time=datetime.min.time())
    logging.info("job_queue –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.")

    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & ~filters.ChatType.GROUPS,
        handle_coupon_amount,
        block=False
    ), group=0)

    async def check_db_connection(context: CallbackContext):
        try:
            conn = get_db_connection()
            conn.ping(reconnect=True)
            conn.close()
            logging.info("DB connection check - OK")
        except Exception as e:
            logging.error(f"DB connection check failed: {e}")

    # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å job_queue
    job_queue.run_repeating(check_db_connection, interval=300)
    job_queue.run_daily(cleanup_coupons, time=datetime.min.time())
    logging.info("job_queue –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.")
    
    print(f"ALLOWED_GROUP_ID: {ALLOWED_GROUP_ID}")
    print(f"ALLOWED_DISCUSSION_ID: {ALLOWED_DISCUSSION_ID}") 
    print(f"TEST_CHANNEL_ID: {TEST_CHANNEL_ID}")
    print(f"TEST_DISCUSSION_ID: {TEST_DISCUSSION_ID}")

    register_moon_handlers(application)
    register_compatibility_handlers(application)
    register_muhurta_handlers(application)
    register_biorhythm_handlers(application)

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(start, pattern="event_return"))  # –î–æ–±–∞–≤–ª–µ–Ω–æ
    application.add_handler(CommandHandler("stat", handle_stat_command))
    application.add_handler(CallbackQueryHandler(show_my_stats, pattern="my_stats"))
    application.add_handler(CommandHandler("admin_panel", admin_panel))  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–∑–æ–≤–∞ "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"
    application.add_handler(MessageHandler(
        filters.TEXT & filters.Regex(r"^(@|/stat\s*@)"),
        handle_stat_command
    ))
        
    group_handler = MessageHandler(
        filters.ChatType.GROUPS & filters.TEXT & ~filters.COMMAND,
        handle_group_message,
        block=False
    )
    application.add_handler(group_handler, group=1)

    application.add_handler(MessageHandler(
        (filters.ChatType.CHANNEL | filters.ChatType.SUPERGROUP) & filters.UpdateType.CHANNEL_POST,
        handle_channel_post,
        block=False
    ), group=1)

    application.add_handler(CommandHandler("freeze", freeze_command, filters=filters.User(ADMIN_IDS)))
    application.add_handler(CommandHandler("unfreeze", unfreeze_command, filters=filters.User(ADMIN_IDS)))
    application.add_handler(CommandHandler("announce", announce_command, filters=filters.User(ADMIN_IDS)))
    
    application.add_handler(CallbackQueryHandler(manage_freezes, pattern="manage_freezes"))
    application.add_handler(CallbackQueryHandler(show_frozen_accounts, pattern="show_frozen_list"))
    application.add_handler(CallbackQueryHandler(show_frozen_accounts, pattern="frozen_next"))
    application.add_handler(CallbackQueryHandler(show_frozen_accounts, pattern="frozen_prev"))
    application.add_handler(CallbackQueryHandler(manage_announcements, pattern="manage_announcements"))
    application.add_handler(CallbackQueryHandler(show_about_program, pattern="about_program"))
    application.add_handler(CallbackQueryHandler(refresh_profile, pattern="refresh_profile"))
    application.add_handler(CallbackQueryHandler(show_my_stats, pattern="my_stats"))
    application.add_handler(CallbackQueryHandler(check_subscription, pattern="check_subscription"))
    application.add_handler(CallbackQueryHandler(join_referral_program, pattern=r"^join_referral_program_(\d+|none)$"))
    application.add_handler(CallbackQueryHandler(confirm_join_referral_program, pattern=r"^confirm_join_referral_program_(none|\d+)$"))
    application.add_handler(CallbackQueryHandler(my_profile, pattern="my_profile"))
    application.add_handler(CallbackQueryHandler(refresh_balance, pattern="refresh_balance"))
    application.add_handler(CallbackQueryHandler(get_invited_users, pattern="my_invited_users"))
    application.add_handler(CallbackQueryHandler(all_coupons, pattern="all_coupons"))
    application.add_handler(CallbackQueryHandler(create_coupon, pattern="create_coupon"))
    application.add_handler(CallbackQueryHandler(handle_coupon_amount, pattern=r"coupon_amount_"))
    application.add_handler(CallbackQueryHandler(approve_coupon, pattern=r"approve_coupon_"))
    application.add_handler(CallbackQueryHandler(delete_coupon, pattern=r"delete_coupon_"))
    application.add_handler(CallbackQueryHandler(my_coupons, pattern="my_coupons"))
    application.add_handler(CallbackQueryHandler(copy_coupon, pattern=r"copy_coupon_"))
    application.add_handler(CallbackQueryHandler(view_profile, pattern=r"view_profile_"))
    application.add_handler(CallbackQueryHandler(admin_panel, pattern="admin_panel"))
    application.add_handler(CallbackQueryHandler(show_leaderboard, pattern="leaderboard"))
    application.add_handler(CallbackQueryHandler(show_leaderboard, pattern="leaderboard_next"))
    application.add_handler(CallbackQueryHandler(show_leaderboard, pattern="leaderboard_prev"))
    application.add_handler(CallbackQueryHandler(show_pending_coupons, pattern="pending_coupons"))
    application.add_handler(CallbackQueryHandler(user_list, pattern="user_list"))
    application.add_handler(CallbackQueryHandler(lambda update, context: show_users_list(update, context, month_only=True), pattern="show_users_list_month"))
    application.add_handler(CallbackQueryHandler(lambda update, context: show_users_list(update, context, month_only=False), pattern="show_users_list_all"))
    application.add_handler(CallbackQueryHandler(show_referrals, pattern="my_invited_users"))
    application.add_handler(CallbackQueryHandler(show_transaction_history, pattern="transaction_history"))
    application.add_handler(CallbackQueryHandler(show_transaction_history, pattern="trans_next"))
    application.add_handler(CallbackQueryHandler(show_transaction_history, pattern="trans_prev"))
    application.add_handler(CallbackQueryHandler(get_invited_users, pattern="invited_next"))
    application.add_handler(CallbackQueryHandler(get_invited_users, pattern="invited_prev"))
    application.add_handler(CallbackQueryHandler(show_users_list, pattern="users_next"))
    application.add_handler(CallbackQueryHandler(show_users_list, pattern="users_prev"))
    application.add_handler(CallbackQueryHandler(all_coupons, pattern="coupons_next"))
    application.add_handler(CallbackQueryHandler(all_coupons, pattern="coupons_prev"))
    application.add_handler(CallbackQueryHandler(show_pending_coupons, pattern="pending_next"))
    application.add_handler(CallbackQueryHandler(show_pending_coupons, pattern="pending_prev"))
    application.add_handler(CallbackQueryHandler(show_coupon_instructions, pattern="how_to_use_coupon"))
    application.add_handler(CallbackQueryHandler(show_tests_and_calculations, pattern="show_tests"))
    application.add_handler(CallbackQueryHandler(my_coupons, pattern="my_coupons_next"))
    application.add_handler(CallbackQueryHandler(my_coupons, pattern="my_coupons_prev"))

    logging.info("–ó–∞–ø—É—Å–∫ polling...")
    application.run_polling()
    logging.info("Polling –∑–∞–ø—É—â–µ–Ω.")

if __name__ == "__main__":
    main()
